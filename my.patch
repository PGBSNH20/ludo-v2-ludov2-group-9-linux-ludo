diff --git a/.env.example b/.env.example
deleted file mode 100644
index de5e727..0000000
--- a/.env.example
+++ /dev/null
@@ -1,4 +0,0 @@
-DB_PORT=5432
-DB_NAME=DATABASE_NAME
-DB_USER=DB_USER
-DB_PWD=STRONG_PASSWORD
diff --git a/.gitignore b/.gitignore
index 57e4ff5..2c42eb3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,5 @@
 ## Ignore Visual Studio temporary files, build results, and
 ## files generated by popular Visual Studio add-ons.
-.env
 
 # User-specific files
 *.suo
@@ -259,4 +258,4 @@ paket-files/
 
 # Python Tools for Visual Studio (PTVS)
 __pycache__/
-*.pyc
+*.pyc
\ No newline at end of file
diff --git a/README.md b/README.md
index 7226c80..75905b0 100644
--- a/README.md
+++ b/README.md
@@ -1,10 +1,24 @@
 # Linux-Ludo
 A multiplayer Ludo game developed by **Adam Brodin** and **Leo RÃ¶nnebro**.
 
-## Documentation
+## Website structure
+**Home Page**
+  - Contains a basic description and some information about the website.
 
-  - [Technical Spec](docs/general.md)
-  - [Authentication](docs/auth.md)
-  - [SignalR / Websockets](docs/async.md)
-  - [Responsive design](docs/responsive.md)
-  - [Deployment](docs/deploy.md)
+**Game Page**
+  - Game canvas
+  - Basic game information
+  - Player controls
+
+**Auth Page**
+  - Login form
+  - Registration form
+  
+## Development Tools
+* Blazor
+* ASP.NET Core
+* PostgreSQL
+* Docker
+* Tailwind CSS
+* SignalR
+* MessagePack as SignalR protocol
diff --git a/docker/docker-compose.prod.yml b/docker/docker-compose.prod.yml
deleted file mode 100644
index 17eaf0e..0000000
--- a/docker/docker-compose.prod.yml
+++ /dev/null
@@ -1,42 +0,0 @@
-version: '3'
-
-networks:
-  api:
-  db:
-
-services:
-  web:
-    image: thenerdyhamster/ludo-web
-    container_name: web
-    environment:
-      API_URL: "http://api"
-    ports:
-      - "80:80"
-    networks:
-      - api
-
-  api:
-    image: thenerdyhamster/ludo-api
-    container_name: api
-    environment:
-      DB_CONNECTION_STRING: "host=db;port=${DB_PORT};database=${DB_NAME};username=${DB_USER};password=${DB_PWD}"
-    networks:
-      - db
-      - api
-  db:
-    image: postgres:13.2
-    container_name: db
-    environment:
-      - POSTGRES_USER=${DB_USER}
-      - POSTGRES_PASSWORD=${DB_PWD}
-      - POSTGRES_DB=${DB_NAME}
-    ports:
-      - "5432:5432"
-    volumes:
-      - /var/lib/postgresql/data:/var/lib/postgresql/data
-    networks:
-      - db
-
-volumes:
-  pgdata:
-    driver: local
diff --git a/docker/docker-compose.yml b/docker/docker-compose.yml
index 2e78b4e..11851b0 100644
--- a/docker/docker-compose.yml
+++ b/docker/docker-compose.yml
@@ -1,35 +1,9 @@
 version: '3'
 
-networks:
-  api:
-  db:
-
 services:
-  web:
-    container_name: web
-    build:
-      context: ../src/
-      dockerfile: LinuxLudo.Web/Dockerfile
-    environment:
-      API_URL: "http://api"
-    ports:
-      - "80:80"
-    networks:
-      - api
-
-  api:
-    container_name: api
-    build:
-      context: ../src/
-      dockerfile: LinuxLudo.API/Dockerfile
-    environment:
-      DB_CONNECTION_STRING: "host=db;port=5432;database=ludo;username=root;password=secret"
-    networks:
-      - db
-      - api
   db:
     image: postgres:13.2
-    container_name: db
+    container_name: linux-ludo-db
     environment:
       - POSTGRES_USER=root
       - POSTGRES_PASSWORD=secret
@@ -38,9 +12,7 @@ services:
       - "5432:5432"
     volumes:
       - pgdata:/var/lib/postgresql/data
-    networks:
-      - db
 
 volumes:
   pgdata:
-    driver: local
+    driver: local
\ No newline at end of file
diff --git a/docs/async.md b/docs/async.md
deleted file mode 100644
index 1f7718b..0000000
--- a/docs/async.md
+++ /dev/null
@@ -1,94 +0,0 @@
-# Asynchronous communication
-All communication between clients and the game server is done using the [SignalR](https://dotnet.microsoft.com/apps/aspnet/signalr) framework.</br>
-Messages are sent back-and-forth between users and the server through the [MessagePack protocol](https://msgpack.org/).</br>
-The reason for using this protocol over the default **JSON** is speed (latency).</br>
-This also equates to lesser bandwidth which is always a plus if possible.
-
-The MessagePack protocol works by serializing the data into byte-arrays which are then de-serialized upon arrival.
-# SignalR infrastructure
-The SignalR framework works by receiving/sending data through **hubs**.</br>
-Instead of creating individual hubs for each game there is only one [hub](https://github.com/PGBSNH20/ludo-v2-ludov2-group-9-linux-ludo/blob/main/src/LinuxLudo.Web/Hubs/HubController.cs) in the game which handles all traffic, across **all** games & users.</br>
-
-The hub then splits its users up into groups which are correlated to the game's **UUID**.
-
-**Note:** there are no unit tests as regards to the hub currently in the project due to problems with mocking a hub client connection.
-In order to fully test and simulate a connection every user must provide a **ConnectionId** from its context.
-As of right now (05/28) the lack of underlying documentation restricts us from mock said information, but will be added if a solution appears.
-The hubs core logic is still tested through the [GameEngineTest](https://github.com/PGBSNH20/ludo-v2-ludov2-group-9-linux-ludo/blob/main/src/LinuxLudo.Test/Game/GameEngineTest.cs).
-
-# GameHub methods
-The player's turn is updated through UpdatePlayerTurn() after any of the following methods have executed fully:
-- MoveToken()
-- BringOutToken()
-
-The hub controlling the games use the following methods:
-
-## JoinGame
-```csharp
-public async Task JoinGame(string username, Guid gameId)
-```
-Called whenever a user clicks the join button on a game page.
-Responsible for adding the user to the specified games group </br>
-by fetching 
-```csharp 
-Context.ConnectionId
-```
-and storing it in the **hubs** repository list of connected users.
-
-## NotifyRollDice
-```csharp
-public async Task NotifyRollDice(string username, int roll)
-```
-A helper method used to notify connected clients that a player has rolled the dice.
-
-## MoveToken
-```csharp
-public async Task MoveToken(byte[] receivedMessage)
-```
-Called when the player whose turn it is click the roll dice button.
-Responsible for calculating the updated tokens position and almost broadcasting the change to connected clients through **NotifyRollDice()**
-It is also responsible for determining what (if any) tokens have been knocked out and also as a result if a player has won.
-It does this by analyzing the result of the [GameEngine](https://github.com/PGBSNH20/ludo-v2-ludov2-group-9-linux-ludo/blob/main/src/LinuxLudo.API/Domain/GameEngine.cs)'s **MoveToken()** method.
-
-## BringOutToken
-```csharp
-public async Task BringOutToken(byte[] receivedMessage)
-```
-Called when a player clicks the bring out token button.
-Responsible for rolling the dice and analyzing the result and determining whether or not the player brings out a token (roll number 6).
-It then either broadcasts a successful token "bring-out" or simply the rolled number.
-
-## NotifyTokenKnockout
-```csharp
-public async Task NotifyTokenKnockout(string tokenHolderName, char tokenIdentifierChar)
-```
-A helper method used to notify connected clients on which token has been knocked out (the players name holding the token and the tokens identifier letter).
-
-## UpdatePlayerTurn
-```csharp
-private async Task UpdatePlayerTurn(OpenGame game)
-```
-A helper method used to notify connected clients on whose turn it is. Sends the color of whose turn it is.
-Called after any full execution from:
-- MoveToken()
-- BringOutToken()
-
-## SendConnectionChanged
-```csharp
-private async Task SendConnectionChanged(string gameId, string username, List<Player> players)
-```
-Called whenever a player connects/disconnects from the game.
-Used to notify clients of whoever joined/leaved and also sends an updated list of **connected** players.
-
-## OnDisconnectedAsync
-```csharp
-public override async Task OnDisconnectedAsync(Exception exception)
-```
-Called internally from SignalR whenever a connected client disconnects for **any** reason.
-This **overridden** method automatically removes the disconnected player from its **game**.
-Subsequently it notifies the **connected** clients the name of the disconnected player and then updates the game's turn
-if the game's current turn was set to the **disconnected** player.
-
-
-
-
diff --git a/docs/auth.md b/docs/auth.md
deleted file mode 100644
index 6737716..0000000
--- a/docs/auth.md
+++ /dev/null
@@ -1,28 +0,0 @@
-# Authentication
-Authentication on the website is **optional** and is **not** required to play a game. Users may play as **guests** with a custom inputted name or choose to login to their accounts.</br>
-
-All authentication based actions (logging in/signing up/verifiying users) is done through our own back-end. There are no third-party **services** that are being used, excluding frameworks/libraries et.c.</br>
-
-The main component responsible for executing these actions is the [AuthController](https://github.com/PGBSNH20/ludo-v2-ludov2-group-9-linux-ludo/blob/main/src/LinuxLudo.API/Controllers/AuthController.cs).
-It is structured as seen below.
-
-# AuthController
-- ## SignUp
-```csharp
-[HttpPost("SignUp")]
-        public async Task<IActionResult> SignUp([FromBody] SignUpResource resource)
-```
-This method handles the signup requests.
-It does so by taking an input **resource** as username/password and then it runs queries through our database.
-It then returns a response message, verifying of its potential success, and/or response codes/message.
-
-- ## SignIn
-```csharp
-[HttpPost("SignIn")]
-        public async Task<IActionResult> SignIn([FromBody] SignInResource resource)
-```
-Responsible for signing in and verifying user details.
-This method works similarly to SignUp, but rather than creating new entries in the database, it **verifies** them.
-If the login request is valid (user credentials match database) an **JWT** authentication token is sent back, along with a success code/message.
-If for some reason the request wasn't valid, explicit details are sent back to the client explaining what the issue is.
-
diff --git a/docs/deploy.md b/docs/deploy.md
deleted file mode 100644
index 02f2ea9..0000000
--- a/docs/deploy.md
+++ /dev/null
@@ -1,13 +0,0 @@
-# Deployment
-
-To the deploy our application, we planned to use docker cotnainers to deploy, and we succeded before a big merge was merged.
-To deploy the application goto [Commit](https://github.com/PGBSNH20/ludo-v2-ludov2-group-9-linux-ludo/tree/963378a28b5d59c2b603c9cd7ca21976cb258ddb) and clone.
-Go into the root folder and run `ocker-compose -f docker/docker-compose.yml up` this will deploy a "development" version o the app.
-
-To deploy for production please copy `docker/docker-compose.prod.yml` and create a `.env` from `.env.example`, after that run `docker-compose up -d`.
-
-To make our deployments better we had thoughts about using github actions to automate the builds, which would save alot of time and make it possible for dynamic updates.
-
-In the current state the main branch is unstable.
-
-Deployed on [ludo.nerdyhamster.net](https://ludo.nerdyhamster.net)
diff --git a/docs/general.md b/docs/general.md
deleted file mode 100644
index 2335755..0000000
--- a/docs/general.md
+++ /dev/null
@@ -1,30 +0,0 @@
-# General information
-
-## Documentation
-
-  - [Technical Spec](general.md)
-  - [Authentication](auth.md)
-  - [SignalR / Websockets](async.md)
-  - [Responsive design](responsive.md)
-  - [Deployment](deploy.md)
-
-## Tools and Frameworks used
-  - Tailwind
-  - SignalR
-  - Postgres
-  - ASP.NET
-  - EntityFramework
-  - Docker
-  
-## Project layout
-```
-âââ docker
-âÂ Â  âââ docker-compose.prod.yml - Deployment for production
-âÂ Â  âââ docker-compose.yml - Deployment for testing and development
-â
-âââ src
-    âââ LinuxLudo.API - Rest API and Websockets
-    âââ LinuxLudo.Core - Generic Models between API & Web
-    âââ LinuxLudo.Test - UnitTests
-    âââ LinuxLudo.Web - Web application in blazor
-```
diff --git a/docs/responsive.md b/docs/responsive.md
deleted file mode 100644
index 7e178e7..0000000
--- a/docs/responsive.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# Frontend responsive design
-Our goal with the website layout & elements was to provide full-responsiveness regardless of screen size and device. This is something that can vary a lot in difficulty depending on what type of element you're dealing with.
-Buttons, text, and other **GUI** elements are rather easy to scale and adjust based on underlying client-side parameters such as screen-size. </br>
-
-This is something we've done quite easily in a lot of places by using [Tailwind CSS](https://tailwindcss.com/) as our CSS-library of choice.
-By using Tailwind we can easily design our elements by dividing them up into rows/columns and appyling all the neccessary design adjustments right inside the HTML.
-
-# The canvas
-Our main source of attention is derived from the canvas where the actual game is rendered and displayed.</br>
-The problem with the canvas and **responsive-design** comes from its rendering nature, **relational** sizing. By relational sizing, I mean the size of all objects inside of the canvas are relative to one another.
-For example (not actual sizing), say the canvas is 100px wide, and therefore 100px tall. A token's width might then be 1/20 of the canvas width, as its relative to everything surronding it.
-And this goes on and on, font-sizes for example might be 1/100 of the canvas width, and so if the canvas gets bigger, so does the font-size.
-
-This brings us to the **problem** at hand: the canvas width must be **equal** to the height, a 1:1 aspect ratio. Seeing as most devices don't have a 1:1 ratio, but rather most commonly 16:9.</br>
-So to combat this the canvas scales semi-responsively, on larger screens it sets itself to a high percentage of the total page area, and on mobile screens it fits as big as possible to combat the smaller screen.
-
-
diff --git a/src/LinuxLudo.API/Controllers/GamesController.cs b/src/LinuxLudo.API/Controllers/GamesController.cs
index 434ca49..8a7a4bd 100644
--- a/src/LinuxLudo.API/Controllers/GamesController.cs
+++ b/src/LinuxLudo.API/Controllers/GamesController.cs
@@ -11,7 +11,7 @@ using Microsoft.AspNetCore.Mvc;
 namespace LinuxLudo.API.Controllers
 {
     [Authorize]
-    [Route("/[controller]")]
+    [Route("/api/[controller]")]
     public class GamesController : Controller
     {
         private readonly IGameService _gameService;
diff --git a/src/LinuxLudo.API/Database/Repositories/GameHubRepository.cs b/src/LinuxLudo.API/Database/Repositories/GameHubRepository.cs
index 85d3922..285ba0a 100644
--- a/src/LinuxLudo.API/Database/Repositories/GameHubRepository.cs
+++ b/src/LinuxLudo.API/Database/Repositories/GameHubRepository.cs
@@ -12,9 +12,10 @@ namespace LinuxLudo.API.Database.Repositories
         public List<OpenGame> openGames = new();
         public List<ConnectedUser> connectedUsers = new();
 
-        public void AddGame(OpenGame game) => openGames.Add(game);
-        public void RemoveGame(OpenGame game) => openGames.Remove(game);
-
+        public void AddGame(OpenGame game)
+        {
+            openGames.Add(game);
+        }
         public void AddPlayer(OpenGame game, string username)
         {
             string color = GetAvailableColor(game);
@@ -22,14 +23,16 @@ namespace LinuxLudo.API.Database.Repositories
             game.PlayersInGame.Add(player);
         }
 
-        public void ConnectUser(ConnectedUser user) => connectedUsers.Add(user);
+        public void ConnectUser(ConnectedUser user)
+        {
+            connectedUsers.Add(user);
+        }
+
         public void DisconnectUser(ConnectedUser user)
         {
-            if (user != null)
-            {
-                connectedUsers.Remove(user);
-            }
+            connectedUsers.Remove(user);
         }
+
         public ConnectedUser FetchUserById(string connectionId)
         {
             if (connectedUsers.Any(user => user.ConnectionId == connectionId))
@@ -37,20 +40,22 @@ namespace LinuxLudo.API.Database.Repositories
                 return connectedUsers.First(user => user.ConnectionId == connectionId);
             }
 
-            return null;
+            return new ConnectedUser("", "", null);
         }
 
-        public void RemovePlayer(OpenGame game, string username) => game.PlayersInGame.Remove(game.PlayersInGame.First(player => player.Name == username));
-        public IEnumerable<OpenGame> FetchAllGames() => openGames;
+        public void RemovePlayer(OpenGame game, string username)
+        {
+            game.PlayersInGame.Remove(game.PlayersInGame.First(player => player.Name == username));
+        }
 
-        public OpenGame FetchGameById(Guid id)
+        public IEnumerable<OpenGame> FetchAllGames()
         {
-            if (openGames.Any(game => game.GameId == id))
-            {
-                return openGames.First(game => game.GameId == id);
-            }
+            return openGames;
+        }
 
-            return null;
+        public OpenGame FetchGameById(Guid id)
+        {
+            return openGames.First(game => game.GameId == id);
         }
 
         private string GetAvailableColor(OpenGame game)
diff --git a/src/LinuxLudo.API/Dockerfile b/src/LinuxLudo.API/Dockerfile
index 22e62c2..00b4cf3 100644
--- a/src/LinuxLudo.API/Dockerfile
+++ b/src/LinuxLudo.API/Dockerfile
@@ -1,31 +1,20 @@
 ï»¿FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
 WORKDIR /app
 EXPOSE 80
+EXPOSE 443
 
-# Specify Image
 FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
-
-# Set work dir
 WORKDIR /src
-
-# Copy csproj files into container
-COPY LinuxLudo.API/LinuxLudo.API.csproj ./LinuxLudo.API/
-COPY LinuxLudo.Core/LinuxLudo.Core.csproj ./LinuxLudo.Core/
-
-# Restore (resolve deps)
+COPY ["LinuxLudo.API/LinuxLudo.API.csproj", "LinuxLudo.API/"]
 RUN dotnet restore "LinuxLudo.API/LinuxLudo.API.csproj"
-
-# Copy source code into build
-COPY LinuxLudo.API ./LinuxLudo.API/
-COPY LinuxLudo.Core ./LinuxLudo.Core/
-
-# Build project and output to /build
-RUN dotnet build "LinuxLudo.API/LinuxLudo.API.csproj" -c Release -o /build
+COPY . .
+WORKDIR "/src/LinuxLudo.API"
+RUN dotnet build "LinuxLudo.API.csproj" -c Release -o /app/build
 
 FROM build AS publish
-RUN dotnet publish "LinuxLudo.API/LinuxLudo.API.csproj" -c Release -o /publish
+RUN dotnet publish "LinuxLudo.API.csproj" -c Release -o /app/publish
 
 FROM base AS final
 WORKDIR /app
-COPY --from=publish /publish .
+COPY --from=publish /app/publish .
 ENTRYPOINT ["dotnet", "LinuxLudo.API.dll"]
diff --git a/src/LinuxLudo.API/Domain/Models/ConnectedUser.cs b/src/LinuxLudo.API/Domain/Models/ConnectedUser.cs
index fb0d6c4..5738d37 100644
--- a/src/LinuxLudo.API/Domain/Models/ConnectedUser.cs
+++ b/src/LinuxLudo.API/Domain/Models/ConnectedUser.cs
@@ -1,21 +1,13 @@
 using LinuxLudo.Core.Models;
-using MessagePack;
 
 namespace LinuxLudo.API.Domain.Models
 {
-    [MessagePackObject]
     public class ConnectedUser
     {
-        [Key(0)]
-        public string Username { get; set; }
-        [Key(1)]
-
+        public string Username { get; }
         public string ConnectionId { get; }
-        [Key(2)]
-
         public OpenGame JoinedGame { get; }
 
-        public ConnectedUser() { }
         public ConnectedUser(string username, string connectionId, OpenGame joinedGame)
         {
             Username = username;
diff --git a/src/LinuxLudo.API/Domain/Repositories/IGameHubRepository.cs b/src/LinuxLudo.API/Domain/Repositories/IGameHubRepository.cs
index 75e74e2..bfb844c 100644
--- a/src/LinuxLudo.API/Domain/Repositories/IGameHubRepository.cs
+++ b/src/LinuxLudo.API/Domain/Repositories/IGameHubRepository.cs
@@ -8,7 +8,6 @@ namespace LinuxLudo.API.Domain.Repositories
     public interface IGameHubRepository
     {
         void AddGame(OpenGame game);
-        void RemoveGame(OpenGame game);
 
         void AddPlayer(OpenGame game, string username);
         void RemovePlayer(OpenGame game, string username);
diff --git a/src/LinuxLudo.API/Hubs/GameHub.cs b/src/LinuxLudo.API/Hubs/GameHub.cs
index 5739154..3d9b024 100644
--- a/src/LinuxLudo.API/Hubs/GameHub.cs
+++ b/src/LinuxLudo.API/Hubs/GameHub.cs
@@ -17,59 +17,33 @@ namespace LinuxLudo.API.Hubs
         private readonly GameEngine engine = new();
         public GameHub(IGameHubRepository repository) { _repository = repository; }
 
-        public async Task RequestGameData(byte[] receivedMessage)
+        public async Task JoinGame(string username, Guid gameId)
         {
-            // Requested game
-            OpenGame game = _repository.FetchGameById(MessagePackSerializer.Deserialize<Guid>(receivedMessage));
-
-            // Send data back about the game to specific client
-            await Clients.Client(Context.ConnectionId).SendAsync("ReceiveGameData", MessagePackSerializer.Serialize(game));
-        }
-
-        public async Task GetAvailableGames()
-        {
-            var availableGames = MessagePackSerializer.Serialize(_repository.FetchAllGames());
-
-            // Updates the specific connected player on what games are available on (/Play)
-            await Clients.Client(Context.ConnectionId).SendAsync("ReceiveAvailableGames", availableGames);
-        }
-
-        public async Task CreateNewGame(byte[] receivedMessage)
-        {
-            string gameName = MessagePackSerializer.Deserialize<string>(receivedMessage);
-
-            // Creates a new game
-            OpenGame game = new(Guid.NewGuid(), gameName);
-            _repository.AddGame(game);
+            // Creates a new game if game is not yet active
+            if (!_repository.FetchAllGames().Any(game => game.GameId == gameId))
+            {
+                _repository.AddGame(new OpenGame(gameId));
+            }
 
-            // Sends game data back to requester (client)
-            await Clients.Client(Context.ConnectionId).SendAsync("ReceiveCreateGame", MessagePackSerializer.Serialize(game.GameId));
-        }
+            OpenGame game = _repository.FetchGameById(gameId);
 
-        public async Task JoinGame(byte[] receivedMessage)
-        {
-            PlayerJoinMessage message = MessagePackSerializer.Deserialize<PlayerJoinMessage>(receivedMessage);
-            OpenGame game = _repository.FetchGameById(message.GameId);
-            if (game.PlayersInGame.Count < 4)
+            // Adds the player if they don't already exist in the game
+            if (game.PlayersInGame.All(player => player.Name != username))
             {
-                // Adds the player if they don't already exist in the game
-                if (game.PlayersInGame.All(player => player.Name != message.Username))
-                {
-                    _repository.AddPlayer(_repository.FetchGameById(message.GameId), message.Username);
+                _repository.AddPlayer(_repository.FetchGameById(gameId), username);
 
-                    // Adds a new connected user that is linked to the selected game
-                    _repository.ConnectUser(new ConnectedUser(message.Username, Context.ConnectionId, game));
-                }
+                // Adds a new connected user that is linked to the selected game
+                _repository.ConnectUser(new ConnectedUser(username, Context.ConnectionId, game));
+            }
 
-                // Add the new player to the joined game's group
-                await Groups.AddToGroupAsync(Context.ConnectionId, message.GameId.ToString());
+            // Add the new player to the joined game's group
+            await Groups.AddToGroupAsync(Context.ConnectionId, gameId.ToString());
 
-                // Updates all clients with the latest player list
-                await SendConnectionChanged(message.GameId.ToString(), message.Username, _repository.FetchGameById(message.GameId).PlayersInGame);
+            // Updates all clients with the latest player list
+            await SendConnectionChanged(gameId.ToString(), username, _repository.FetchGameById(gameId).PlayersInGame);
 
-                // Update the specific player on whose turn it is
-                await Clients.Client(Context.ConnectionId).SendAsync("ReceivePlayerTurn", MessagePackSerializer.Serialize(game.CurrentTurnColor));
-            }
+            // Update the specific player on whose turn it is
+            await Clients.Client(Context.ConnectionId).SendAsync("ReceivePlayerTurn", MessagePackSerializer.Serialize(game.CurrentTurnColor));
         }
 
         public async Task NotifyRollDice(string username, int roll)
@@ -128,7 +102,6 @@ namespace LinuxLudo.API.Hubs
 
                         // Player has won the game
                         await Clients.Group(game.GameId.ToString()).SendAsync("ReceiveGameOver", victoryMessage);
-                        _repository.RemoveGame(game);
                         return;
                     }
                 }
@@ -210,16 +183,9 @@ namespace LinuxLudo.API.Hubs
 
                 // Update the clients that user has left
                 await SendConnectionChanged(user.JoinedGame.GameId.ToString(), user.Username, _repository.FetchGameById(user.JoinedGame.GameId).PlayersInGame);
-            }
 
-            if (user?.ConnectionId != null)
-            {
-                // Removes user fron connected list
-                _repository.DisconnectUser(_repository.FetchUserById(user.ConnectionId));
             }
 
-            // Updates all subscribed clients on the new game data
-            await Clients.All.SendAsync("ReceiveAvailableGames", _repository.FetchAllGames());
             await base.OnDisconnectedAsync(exception);
         }
     }
diff --git a/src/LinuxLudo.API/Startup.cs b/src/LinuxLudo.API/Startup.cs
index 1b9203b..41304d3 100644
--- a/src/LinuxLudo.API/Startup.cs
+++ b/src/LinuxLudo.API/Startup.cs
@@ -40,9 +40,7 @@ namespace LinuxLudo.API
         {
             services.Configure<JwtSettings>(Configuration.GetSection("Jwt"));
             var jwtSettings = Configuration.GetSection("Jwt").Get<JwtSettings>();
-
-            var connectionString = Environment.GetEnvironmentVariable("DB_CONNECTION_STRING") ?? Configuration.GetConnectionString("Default");
-            services.AddDbContext<AppDbContext>(opts => opts.UseNpgsql(connectionString));
+            services.AddDbContext<AppDbContext>(opts => opts.UseNpgsql(Configuration.GetConnectionString("Default")));
             services.AddIdentity<User, Role>(opts =>
                 {
                     opts.Password.RequireNonAlphanumeric = false;
@@ -50,8 +48,6 @@ namespace LinuxLudo.API
                 })
                 .AddEntityFrameworkStores<AppDbContext>()
                 .AddDefaultTokenProviders();
-
-
             services.AddAutoMapper(typeof(Startup));
             services.AddSignalR(opts =>
             {
@@ -130,9 +126,9 @@ namespace LinuxLudo.API
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
-        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, AppDbContext context)
+        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
         {
-            context.Database.Migrate();
+
             app.UseResponseCompression();
             if (env.IsDevelopment())
             {
diff --git a/src/LinuxLudo.API/appsettings.Development.json b/src/LinuxLudo.API/appsettings.Development.json
index f4314d5..0ae0a07 100644
--- a/src/LinuxLudo.API/appsettings.Development.json
+++ b/src/LinuxLudo.API/appsettings.Development.json
@@ -13,5 +13,5 @@
     "Issuer": "http://localhost:5000",
     "Secret": "SOm123123f@$@!&213D2123jfASFJ2931jSFK29314hDF34843DFSDFHkHF3423@#$!JKkj$@HF9v",
     "ExpirationInDays": 30
-  }
-}
\ No newline at end of file
+  } 
+}
diff --git a/src/LinuxLudo.API/appsettings.json b/src/LinuxLudo.API/appsettings.json
index 79b1c60..d9d9a9b 100644
--- a/src/LinuxLudo.API/appsettings.json
+++ b/src/LinuxLudo.API/appsettings.json
@@ -6,10 +6,5 @@
       "Microsoft.Hosting.Lifetime": "Information"
     }
   },
-  "AllowedHosts": "*",
-  "Jwt": {
-    "Issuer": "http://localhost:5000",
-    "Secret": "SOm123123f@$@!&213D2123jfASFJ2931jSFK29314hDF34843DFSDFHkHF3423@#$!JKkj$@HF9v",
-    "ExpirationInDays": 30
-  }
-}
\ No newline at end of file
+  "AllowedHosts": "*"
+}
diff --git a/src/LinuxLudo.Core/Models/MessagePack/PlayerJoinMessage.cs b/src/LinuxLudo.Core/Models/MessagePack/PlayerJoinMessage.cs
deleted file mode 100644
index 9a4358a..0000000
--- a/src/LinuxLudo.Core/Models/MessagePack/PlayerJoinMessage.cs
+++ /dev/null
@@ -1,21 +0,0 @@
-using System;
-using MessagePack;
-
-namespace LinuxLudo.Core
-{
-    [MessagePackObject]
-    public class PlayerJoinMessage
-    {
-        [Key(0)]
-        public string Username { get; set; }
-        [Key(1)]
-        public Guid GameId { get; set; }
-
-        public PlayerJoinMessage() { }
-        public PlayerJoinMessage(string username, Guid gameId)
-        {
-            Username = username;
-            GameId = gameId;
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/LinuxLudo.Core/Models/OpenGame.cs b/src/LinuxLudo.Core/Models/OpenGame.cs
index 25688fb..1a1cb7f 100644
--- a/src/LinuxLudo.Core/Models/OpenGame.cs
+++ b/src/LinuxLudo.Core/Models/OpenGame.cs
@@ -1,26 +1,17 @@
 using System;
 using System.Collections.Generic;
-using MessagePack;
 
 namespace LinuxLudo.Core.Models
 {
-    [MessagePackObject]
     public class OpenGame
     {
-        [Key(0)]
         public Guid GameId { get; set; }
-        [Key(1)]
         public string CurrentTurnColor { get; set; }
-        [Key(2)]
-        public string GameName { get; set; }
-        [Key(3)]
         public List<Player> PlayersInGame { get; set; }
 
-        public OpenGame() { }
-        public OpenGame(Guid gameId, string gameName)
+        public OpenGame(Guid gameId)
         {
             GameId = gameId;
-            GameName = gameName;
             CurrentTurnColor = "red";
             PlayersInGame = new List<Player>();
         }
diff --git a/src/LinuxLudo.Test/Game/GameEngineTest.cs b/src/LinuxLudo.Test/Game/GameEngineTest.cs
index 27103b1..bca9b4b 100644
--- a/src/LinuxLudo.Test/Game/GameEngineTest.cs
+++ b/src/LinuxLudo.Test/Game/GameEngineTest.cs
@@ -30,7 +30,7 @@ namespace LinuxLudo.Test.Game
         [Description("Verifies that when a token moves that it doesn't walk up its enemies colored paths")]
         public void MoveToken_EnemyPath()
         {
-            OpenGame game = new(Guid.NewGuid(), "Test-game");
+            OpenGame game = new(Guid.NewGuid());
             game.PlayersInGame.Add(new Player("Red", "Adam") { Tokens = new List<GameToken>() { new GameToken('A') } });
             game.PlayersInGame[0].Tokens[0].TilePos = 3; // Index 3 = first tile of yellow path
 
@@ -44,7 +44,7 @@ namespace LinuxLudo.Test.Game
         [Description("Verifies that enemy tokens get knocked out when walked upon")]
         public void MoveToken_WalkEnemy_Knockout()
         {
-            OpenGame game = new(Guid.NewGuid(), "Test-game");
+            OpenGame game = new(Guid.NewGuid());
             game.PlayersInGame.Add(new Player("Red", "Adam") { Tokens = new List<GameToken>() { new GameToken('A') } });
             game.PlayersInGame.Add(new Player("Blue", "Stephan") { Tokens = new List<GameToken>() { new GameToken('A') } });
             game.PlayersInGame[0].Tokens[0].TilePos = 3; // Index 3 = first tile of yellow path
@@ -61,7 +61,7 @@ namespace LinuxLudo.Test.Game
         [Description("Verifies that a token can be brought out when the player just joined")]
         public void NewPlayer_BringToken()
         {
-            OpenGame game = new(Guid.NewGuid(), "Test-game");
+            OpenGame game = new(Guid.NewGuid());
 
             // Add the player, their tokens WITHOUT setting any parameters (as is done ingame)
             game.PlayersInGame.Add(new Player("Red", "Adam")
@@ -81,7 +81,7 @@ namespace LinuxLudo.Test.Game
         [Description("Verifies that a token CANNOT be brought out if all tokens are already out of the base")]
         public void Player_BringToken_AllOut()
         {
-            OpenGame game = new(Guid.NewGuid(), "Test-game");
+            OpenGame game = new(Guid.NewGuid());
 
             // Add the player, their tokens WITHOUT setting any parameters (as is done ingame)
             game.PlayersInGame.Add(new Player("Red", "Adam")
diff --git a/src/LinuxLudo.Web/Dockerfile b/src/LinuxLudo.Web/Dockerfile
index 57ab69b..59ee661 100644
--- a/src/LinuxLudo.Web/Dockerfile
+++ b/src/LinuxLudo.Web/Dockerfile
@@ -1,29 +1,20 @@
-ï»¿# Specify Image
-FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
+ï»¿FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
+WORKDIR /app
+EXPOSE 80
+EXPOSE 443
 
-# Set work dir
+FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
 WORKDIR /src
-
-# Copy csproj files into container
-COPY LinuxLudo.Web/LinuxLudo.Web.csproj ./LinuxLudo.Web/
-COPY LinuxLudo.Core/LinuxLudo.Core.csproj ./LinuxLudo.Core/
-
-# Restore (resolve deps)
+COPY ["LinuxLudo.Web/LinuxLudo.Web.csproj", "LinuxLudo.Web/"]
 RUN dotnet restore "LinuxLudo.Web/LinuxLudo.Web.csproj"
-
-# Copy source code into build
-COPY LinuxLudo.Web ./LinuxLudo.Web/
-COPY LinuxLudo.Core ./LinuxLudo.Core/
-
-# Build project and output to /build
-RUN dotnet build "LinuxLudo.Web/LinuxLudo.Web.csproj" -c Release -o /build
+COPY . .
+WORKDIR "/src/LinuxLudo.Web"
+RUN dotnet build "LinuxLudo.Web.csproj" -c Release -o /app/build
 
 FROM build AS publish
-RUN dotnet publish "LinuxLudo.Web/LinuxLudo.Web.csproj" -c Release -o /publish
-RUN ls /publish
+RUN dotnet publish "LinuxLudo.Web.csproj" -c Release -o /app/publish
 
-FROM nginx:alpine AS final
-WORKDIR /var/www/web
-COPY --from=publish /publish/wwwroot .
-COPY LinuxLudo.Web/nginx.conf /etc/nginx/nginx.conf
-EXPOSE 80
+FROM base AS final
+WORKDIR /app
+COPY --from=publish /app/publish .
+ENTRYPOINT ["dotnet", "LinuxLudo.Web.dll"]
diff --git a/src/LinuxLudo.Web/Domain/Models/GamesResponseModel.cs b/src/LinuxLudo.Web/Domain/Models/GamesResponseModel.cs
index 13d1c62..7deec20 100644
--- a/src/LinuxLudo.Web/Domain/Models/GamesResponseModel.cs
+++ b/src/LinuxLudo.Web/Domain/Models/GamesResponseModel.cs
@@ -1,3 +1,4 @@
+using System.Collections.Generic;
 
 namespace LinuxLudo.Web.Game
 {
@@ -6,16 +7,13 @@ namespace LinuxLudo.Web.Game
         public string Id { get; set; }
         public string Name { get; set; }
         public int MaxPlayers { get; set; }
-        public string State { get; set; }
+        public int State { get; set; }
+
         public int AmountPlaying { get; set; }
+    }
 
-        public AvailableGame(string id, string name, int maxPlayers, string state, int amountPlaying)
-        {
-            Id = id;
-            Name = name;
-            MaxPlayers = maxPlayers;
-            State = state;
-            AmountPlaying = amountPlaying;
-        }
+    public class GamesResponseModel
+    {
+        public List<AvailableGame> Data { get; set; }
     }
 }
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Domain/Services/IGameService.cs b/src/LinuxLudo.Web/Domain/Services/IGameService.cs
index 3058269..6f60a12 100644
--- a/src/LinuxLudo.Web/Domain/Services/IGameService.cs
+++ b/src/LinuxLudo.Web/Domain/Services/IGameService.cs
@@ -1,16 +1,7 @@
-using System;
-using System.Collections.Generic;
-using System.Threading.Tasks;
-using LinuxLudo.Web.Domain.Models;
-using LinuxLudo.Web.Game;
-using LinuxLudo.Web.Services;
-
 namespace LinuxLudo.Web.Domain.Services
 {
     public interface IGameService
     {
-        public GameService NewGameService(Guid gameId, string username);
-        public Task<bool> CanPlay();
-        public Task<GameStatus> GetGameStatus();
+        public bool CanPlay(string username);
     }
 }
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Hubs/HubController.cs b/src/LinuxLudo.Web/Hubs/HubController.cs
index afa3e8c..6ef36a6 100644
--- a/src/LinuxLudo.Web/Hubs/HubController.cs
+++ b/src/LinuxLudo.Web/Hubs/HubController.cs
@@ -1,4 +1,3 @@
-using System;
 using Microsoft.AspNetCore.SignalR.Client;
 using Microsoft.Extensions.DependencyInjection;
 
@@ -10,9 +9,8 @@ namespace LinuxLudo.Web.Hubs
 
         public IHubConnection Connect(string hub)
         {
-            var URL = Environment.GetEnvironmentVariable("API_URL") ?? "https://localhost:5001";
             _hub = new HubConnectionBuilder()
-                .WithUrl($"{URL}/{hub}")
+                .WithUrl($"https://localhost:5001/{hub}")
                 .WithAutomaticReconnect()
                 .AddMessagePackProtocol()
                 .Build();
diff --git a/src/LinuxLudo.Web/LinuxLudo.Web.csproj b/src/LinuxLudo.Web/LinuxLudo.Web.csproj
index b6c373b..2136281 100644
--- a/src/LinuxLudo.Web/LinuxLudo.Web.csproj
+++ b/src/LinuxLudo.Web/LinuxLudo.Web.csproj
@@ -1,4 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">
+  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
+    <Exec Command="yarn run buildcss" />
+  </Target>
   <PropertyGroup>
     <TargetFramework>net5.0</TargetFramework>
   </PropertyGroup>
@@ -18,4 +21,5 @@
   <ItemGroup>
     <ProjectReference Include="..\LinuxLudo.Core\LinuxLudo.Core.csproj" />
   </ItemGroup>
+
 </Project>
diff --git a/src/LinuxLudo.Web/Pages/ActiveGame.razor b/src/LinuxLudo.Web/Pages/ActiveGame.razor
index 6ba21b7..0b3f952 100644
--- a/src/LinuxLudo.Web/Pages/ActiveGame.razor
+++ b/src/LinuxLudo.Web/Pages/ActiveGame.razor
@@ -1,18 +1,16 @@
 @page "/Game/{Id:guid}"
-@inject IAuthenticationService _authService
 @using LinuxLudo.Web.Domain.Models
 @using MessagePack
+@using Microsoft.AspNetCore.Components.Authorization
 @using Microsoft.AspNetCore.SignalR.Client
 @using LinuxLudo.Core.Models
-@using LinuxLudo.Web.Domain.Services
 @using LinuxLudo.Web.Hubs
 @using LinuxLudo.Web.Services
 @inject NavigationManager _navManager; // Used to navigate in the webbrowser to different urls
 @inject BrowserService _browserService;
 @inject IJSRuntime _jsRuntime;
 @inject Blazored.LocalStorage.ILocalStorageService _localStorage;
-@inject IHubController _hubController
-@inject IGameService _gameService
+@inject HubController _hubController
 
 <LayoutView>
     <img @ref="_redToken" class="hidden" id="redToken" src="Images/redtoken.png" />
@@ -22,7 +20,7 @@
 
     <div hidden=@(!_hasJoinedGame)>
         <h1 class="text-lg text-center">
-            <b>@_game.Name's Game</b>
+            <b>@_game.Name</b>
         </h1>
         <div class="mt-4 flex justify-center items-center">
             <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvas"></BECanvas>
@@ -67,7 +65,7 @@
         if (_game.MaxPlayers > 0)
         {
             <div class="flex flex-col items-center text-center">
-                <h1 class="text-black w-1/4 text-center text-lg font-bold mb-6">@_game.Name's game</h1>
+                <h1 class="text-black w-1/4 text-center text-lg font-bold mb-6">@_game.Name</h1>
                 <h2 class="text-base" style=@(GameIsFull ? "color: red;" : "")>
                     Slots taken:
                     <b>@_game.AmountPlaying</b>/<b>@_game.MaxPlayers</b>
@@ -85,6 +83,9 @@
                     available games
                 </button>
             </div>
+
+            <input @bind="_username" class="flex items-center text-center" style="background-color: #000000; color: #FFFFFF;"
+        placeholder="Enter your username">
         }
         else
         {
@@ -105,11 +106,11 @@
     private Task<AuthenticationState> AuthState { get; set; }
 
     private string _username;
-    private AvailableGame _game = new AvailableGame("ID", "NAME", 4, "LOADING", 0);
+    private AvailableGame _game;
+    private const string Hub = "gamehub";
 
     // SignalR
     private HubConnection _hub;
-    private const string hubName = "gamehub";
 
     // Canvas
     private BECanvasComponent _canvas;
@@ -124,6 +125,7 @@
     private const int statusMessageUpdateIntervalMs = 1000;
 
     // Game
+    private GameService _gameService;
     private GameStatus _gameStatus;
     private bool _hasJoinedGame;
     private string _statusMessage = "Waiting for players...";
@@ -136,31 +138,34 @@
     // When the page has fully loaded
     protected override async Task OnInitializedAsync()
     {
+        _game = new();
+
         var authState = await AuthState;
         if(authState.User.Identity.IsAuthenticated)
         {
             _username = authState.User.Identity.Name;
+
+        await FitCanvas();
+        _board = new GameBoard();
+
+        _gameService = new GameService(@Id, _username);
+
+        var allGames = await _gameService.FetchAllGames();
+        if (allGames.All(game => game.Id != Id.ToString()))
+        {
+            Console.WriteLine($"No such game with id: {Id}");
+            _navManager.NavigateTo("/Play");
         }
         else
         {
-            string guestUsername = await _localStorage.GetItemAsStringAsync("GUEST_USERNAME");
-            if (guestUsername == null)
-            {
-                _navManager.NavigateTo("/Play");
-            }
-            else
-            {
-                _username = guestUsername;
-            }
+            _game = allGames.First(game => game.Id == Id.ToString());
         }
-           
-        await FitCanvas();
-        _board = new GameBoard();
-        _gameService = _gameService.NewGameService(Id, _username);
 
         await SetupSignalR();
-        await _hub.SendAsync("RequestGameData", MessagePackSerializer.Serialize(Id));
-        StateHasChanged();
+        }else
+        {
+            _navManager.NavigateTo("/Login");
+        }
     }
 
     protected async Task FitCanvas()
@@ -204,13 +209,6 @@
 
         if (_hasJoinedGame)
         {
-            if(_gameRenderer.canvasWidth == 0 || _gameRenderer.canvasHeight == 0)
-            {
-                await FitCanvas();
-                _gameRenderer.canvasWidth = _canvasWidth;
-                _gameRenderer.canvasHeight = _canvasHeight;
-                StateHasChanged();
-            }
             await RenderGame();
         }
     }
@@ -223,10 +221,7 @@
 
     protected async Task SetupSignalR()
     {
-        _hub = _hubController.Connect(hubName).Hub();
-
-        // Called when the client request data from a single game
-        _hub.On<byte[]>("ReceiveGameData", (message) => ReceiveGameData(message));
+        _hub = _hubController.Connect(Hub).Hub();
 
         // Called whenever a user joins/leaves
         _hub.On<byte[]>("ReceiveConnectionChanged", (message) => ReceiveConnectionChanged(message));
@@ -234,10 +229,10 @@
         // Called whenever a user rolls the dice (NOT WHEN TOKEN MOVES)
         _hub.On<byte[]>("ReceiveRollDice", (message) => ReceiveRollDice(message));
 
-        // Called whenever a players token changes position
+        // Called whenever the current player turn is updated
         _hub.On<byte[]>("ReceiveTokenMove", (message) => ReceiveTokenMove(message));
 
-        // Called whenever a user rolls and brings out a token
+        // Called whenever the current player turn is updated
         _hub.On<byte[]>("ReceiveBringOutToken", (message) => ReceiveBringOutToken(message));
 
         // Called whenever the current player turn is updated
@@ -251,6 +246,7 @@
 
         // Called whenever a player has won the game (no tokens left)
         _hub.On<byte[]>("ReceiveGameOver", (message) => ReceiveGameOver(message));
+
         await _hub.StartAsync();
     }
 
@@ -307,21 +303,23 @@
         return false;
     }
 
-    private Player GetPlayer() 
+    private Player GetPlayer()
     {
-        if(_gameStatus != null && _gameStatus.Players.Any(p => p.Name == _username))
+        if (_gameStatus != null && _gameStatus.Players.Any(p => p.Name == _username))
         {
             return _gameStatus.Players.First(p => p.Name == _username);
         }
-
-        return new Player("COLOR", "NAME");
+        else
+        {
+            return new Player("dead", _username + " (SPECTATING)");
+        }
     }
 
     private async Task JoinGame()
     {
         if (_game.AmountPlaying < _game.MaxPlayers)
         {
-            await _hub.InvokeAsync("JoinGame", MessagePackSerializer.Serialize(new PlayerJoinMessage(_username, Id)));
+            await _hub.InvokeAsync("JoinGame", _username, Id);
             _hasJoinedGame = true;
             _gameRenderer.username = _username;
         }
@@ -413,22 +411,4 @@
         _statusMessage = $"{(winner == _username ? "YOU" : winner)}" + " won the game!!!".ToUpper();
         StateHasChanged();
     }
-
-    private void ReceiveGameData(byte[] receivedMessage)
-    {
-        OpenGame game = MessagePackSerializer.Deserialize<OpenGame>(receivedMessage);
-        if(game == null)
-        {
-            // No matching game to url was found, redirect away
-            _navManager.NavigateTo("/Play");
-        }
-
-        _game.AmountPlaying = game.PlayersInGame.Count;
-        _game.Name = game.GameName;
-        _game.MaxPlayers = 4;
-        StateHasChanged();
-    }
-
-    
-    private void ReceivePlayerName(byte[] receivedMessage) => _username = MessagePackSerializer.Deserialize<string>(receivedMessage);
 }
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Pages/Game.razor b/src/LinuxLudo.Web/Pages/Game.razor
index 32e088c..8b98b01 100644
--- a/src/LinuxLudo.Web/Pages/Game.razor
+++ b/src/LinuxLudo.Web/Pages/Game.razor
@@ -1,84 +1,52 @@
 @page "/Play"
+@using LinuxLudo.Web.Services
+@using Microsoft.AspNetCore.Components.Authorization
 @inject NavigationManager _navManager; // Used to navigate in the webbrowser to different urls
 @inject Blazored.LocalStorage.ILocalStorageService _localStorage
-@inject IHubController _hubController
-@inject IAuthenticationService _authService
 
 <!-- This page displays the actual Ludo game and can only be accessed when logged in/authenticated -->
 
-@if (!askForUsername)
-{
-    <div class="text-center">
-        <div class="my-2">
-            <h1 class="font-bold flex text-lg justify-center items-center">Available games</h1>
-        </div>
+<AuthorizeView>
+    <!-- Logged in/game view -->
+    <Authorized>
+        <div class="text-center">
+            <div class="my-2">
+                <h1 class="font-bold flex text-lg justify-center items-center">Available games</h1>
+            </div>
 
-        <div class="flex flex-row justify-center">
-            <div>
-                <ul>
-                    @if (availableGames != null)
-                    {
+            <div class="flex flex-row justify-center">
+                <div>
+                    <ul>
+                        @if (availableGames != null)
+                {
                         foreach (AvailableGame game in availableGames)
                         {
                             <li>
+
                                 <button
-                        class="w-40 h-20 text-black text-lg bg-green-300 my-2 hover:my-4 hover:bg-green-700 transition-all transform hover:scale-125"
-                        @onclick=@(() => _navManager.NavigateTo($"/Game/{game.Id}"))>
-                                    <b>@game.Name's game</b> - @game.AmountPlaying/@(game.MaxPlayers)
+                                class="w-40 h-20 text-black text-lg bg-green-300 my-2 hover:my-4 hover:bg-green-700 transition-all transform hover:scale-125"
+                                @onclick=@(() => _navManager.NavigateTo($"/Game/{game.Id}"))>
+                                    <b>@game.Name</b> - @game.MaxPlayers
                                     players
                                 </button>
                             </li>
                         }
-                    }
-                </ul>
-            </div>
-        </div>
-
-        <button style="background-color: #FFFF00; color: #000000;" @onclick=CreateNewGame>Create new game</button>
-    </div>
-}
-else
-{
-    <EditForm Model="userModel" OnValidSubmit="SetUsername" class="card card-body bg-dark">
-        <DataAnnotationsValidator />
-
-        <!-- Creates two forms (username/password) and binds the data in them to the userModel variables -->
-    <div class="form-container">
-            <div class="flex flex-row justify-center">
-                <div class="col-md-10">
-                    <InputText id="username" class="form-control" style="background-color: blue; color: white;"
-                    @bind-Value="userModel.UserName" placeholder="Choose a username" />
-                    <div class="validation-message">
-                        <!-- Displays any error messages from the username form -->
-                    <ValidationMessage For="@(() => userModel.UserName)" />
-                    </div>
-                </div>
-
-                <div class="row">
-                    <div class="col-md-12">
-                        <!-- When the "submit" button type is clicked LoginUser is called (if valid form input) -->
-                    <button type="submit" class="btn btn-login" style="background-color: green; color: white;">Set
-                            username</button>
-                    </div>
+                }
+                    </ul>
                 </div>
             </div>
         </div>
-    </EditForm>
-}
+    </Authorized>
+</AuthorizeView>
+
 
 @code
 {
     [CascadingParameter]
     public Task<AuthenticationState> AuthState { get; set; }
-    private AuthenticationUserModel userModel = new() { Password = "GUEST_000" };
-    private string username;
+    private string userName;
     private GameService gameService;
     private List<AvailableGame> availableGames;
-    private bool askForUsername = false;
-
-    // SignalR
-    private HubConnection _hub;
-    private const string hubName = "gamehub";
 
     // When the page is fully loaded/on startup
     protected override async Task OnInitializedAsync()
@@ -88,86 +56,20 @@ else
         // If the user is logged in
         if (authState.User.Identity.IsAuthenticated)
         {
-            username = authState.User.Identity.Name;
+            userName = authState.User.Identity.Name;
         }
-
-        _hub = _hubController.Connect(hubName).Hub();
-
-        // Subscribes to receive updates on what games are available and their data
-        await SubscribeHubEvents();
-
-        if (!authState.User.Identity.IsAuthenticated)
+        else
         {
-            string guestUsername = await _localStorage.GetItemAsStringAsync("GUEST_USERNAME");
-            if (guestUsername == null)
-            {
-                askForUsername = true;
-            }
-            else
-            {
-                username = guestUsername;
-            }
+            _navManager.NavigateTo("/Login");
         }
 
         availableGames = new List<AvailableGame>();
         gameService = new GameService();
-
-        // Send initial receive request
-        await _hub.SendAsync("GetAvailableGames");
-    }
-
-    private async Task CreateNewGame() => await _hub.SendAsync("CreateNewGame", MessagePackSerializer.Serialize(username));
-    private async Task SubscribeHubEvents()
-    {
-        // Called whenever a games status updates (player /leave/game finished)
-        _hub.On<byte[]>("ReceiveAvailableGames", (message) => ReceiveAvailableGames(message));
-
-        // Received whenever the user requests to create a game (contains gameid)
-        _hub.On<byte[]>("ReceiveCreateGame", (message) => ReceiveCreateGame(message));
-
-        await _hub.StartAsync();
-    }
-
-    private void ReceiveAvailableGames(byte[] receivedMessage)
-    {
-        List<OpenGame> games = MessagePackSerializer.Deserialize<List<OpenGame>>(receivedMessage);
-
-        // Adds the relevant data
-        foreach (OpenGame game in games)
-        {
-            string status = game.PlayersInGame.Count >= 4 ? "Full" : game.PlayersInGame.Count == 0 ? "Empty" : "Playing";
-            availableGames.Add(new AvailableGame(game.GameId.ToString(), game.GameName, 4, status,
-            game.PlayersInGame.Count));
-        }
-
-        // Sorts the games by least players first
-        availableGames.OrderBy(game => game.AmountPlaying);
-        StateHasChanged();
-    }
-
-    private void ReceiveCreateGame(byte[] receivedMessage)
-    {
-        Guid gameId = MessagePackSerializer.Deserialize<Guid>(receivedMessage);
-        _navManager.NavigateTo("/Game/" + gameId.ToString());
-    }
-
-    private void ReceivePlayerName(byte[] receivedMessage)
-    {
-        string name = MessagePackSerializer.Deserialize<string>(receivedMessage);
-        if (name == null || name == "")
-        {
-            askForUsername = true;
-        }
-        else
-        {
-            username = name;
-        }
-        StateHasChanged();
+        await FetchAvailableGames();
     }
 
-    private async Task SetUsername()
+    private async Task FetchAvailableGames()
     {
-        await _localStorage.SetItemAsStringAsync("GUEST_USERNAME", userModel.UserName);
-        _navManager.NavigateTo("/Play", true);
+        availableGames = await gameService.FetchAllGames();
     }
 }
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Pages/Login.razor b/src/LinuxLudo.Web/Pages/Login.razor
index fa5b182..b10db76 100644
--- a/src/LinuxLudo.Web/Pages/Login.razor
+++ b/src/LinuxLudo.Web/Pages/Login.razor
@@ -8,44 +8,44 @@
 @if (showAuthError)
 {
     <div class="alert alert-danger" role="alert">
-        <h1 class="flex items-center justify-center" style="color: black;">@errorMsg</h1>
+        <h1 class="error-msg" style="color: black;">@errorMsg</h1>
     </div>
 }
 
-<h1 class="mt-4 my-20 text-white text-lg flex items-center justify-center bg-green-800">Please login to continue</h1>
-<div class="p-3 my-20 bg-gray-700 flex items-center justify-center">
+<h1 class="title-text">Please login to continue</h1>
+<div class="login-container">
     <EditForm Model="userModel" OnValidSubmit="LoginUser" class="card card-body bg-dark">
         <DataAnnotationsValidator />
 
         <!-- Creates two forms (username/password) and binds the data in them to the userModel variables -->
-        <div class="p-3 m-3">
-            <div class="p-3">
-                <div class="mt-2">
+        <div class="form-container">
+            <div class="form-group row">
+                <div class="col-md-10">
                     <InputText id="username" class="form-control" @bind-Value="userModel.UserName"
                         placeholder="Enter your username" />
-                    <div class="text-red-500">
+                    <div class="validation-message">
                         <!-- Displays any error messages from the username form -->
                         <ValidationMessage For="@(() => userModel.UserName)" />
                     </div>
                 </div>
-                <div class="mt-2">
+                <div class="col-md-10">
                     <InputText type="password" id="password" class="form-control" @bind-Value="userModel.Password"
                         placeholder="Enter your password" />
-                    <div class="text-red-500">
+                    <div class="validation-message">
                         <!-- Displays any error messages from the password form -->
                         <ValidationMessage For="@(() => userModel.Password)" />
                     </div>
                 </div>
             </div>
 
-            <div class="p-3">
-                <div class="mt-2">
+            <div class="row">
+                <div class="col-md-12">
                     <!-- When the "submit" button type is clicked LoginUser is called (if valid form input) -->
-                    <button type="submit" class="bg-green-700 text-white w-full">Login</button>
+                    <button type="submit" class="btn btn-login">Login</button>
                 </div>
                 <div class="col-md-12">
                     <!-- Redirects to /Register -->
-                    <button type="submit" class="bg-red-700 text-white w-full mt-2" @onclick=RedirectRegister>Register</button>
+                    <button type="submit" class="btn btn-register" @onclick=RedirectRegister>Register</button>
                 </div>
             </div>
         </div>
diff --git a/src/LinuxLudo.Web/Pages/Login.razor.css b/src/LinuxLudo.Web/Pages/Login.razor.css
new file mode 100644
index 0000000..b3192dc
--- /dev/null
+++ b/src/LinuxLudo.Web/Pages/Login.razor.css
@@ -0,0 +1,71 @@
+.error-msg
+{
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+.title-text
+{
+    margin-top: 5%;
+    margin-left: 35%;
+    margin-right: 35%;
+    background-color: #008000;
+    color: white;
+    margin-top: 3%;
+    font-size: 34px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+.col-form-label
+{
+    font-weight: bold;
+}
+
+.validation-message
+{
+    color: red
+}
+
+.col-md-10{
+    margin-top: 5px;
+}
+
+.row
+{
+    padding: 10px;
+}
+
+.form-container
+{
+    padding: 10px;
+    margin: 10px;
+}
+
+.login-container
+{
+    padding: 5px;
+    margin-left: 35%;
+    margin-right: 35%;
+    background-color: #343d52;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+.btn-login
+{
+    background-color: #008000;
+    color: white;
+    width: 100%
+}
+
+.btn-register
+{
+    background-color: #a52a2a;
+    color: white;
+    width: 100%;
+    margin-top: 10px;
+}
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Pages/Register.razor b/src/LinuxLudo.Web/Pages/Register.razor
index 778d429..ca00cdf 100644
--- a/src/LinuxLudo.Web/Pages/Register.razor
+++ b/src/LinuxLudo.Web/Pages/Register.razor
@@ -12,18 +12,18 @@
     </div>
 }
 
-<h1 class="mt-4 my-20 text-white text-lg flex items-center justify-center bg-green-800">Register a new account</h1>
+<h1 class="title-text">Register a new account</h1>
 
-<div class="p-3 my-20 bg-gray-700 flex items-center justify-center">
+<div class="login-container">
     <EditForm Model="@userModel" OnValidSubmit="@OnValidSubmit">
         <DataAnnotationsValidator />
 
         <div class="form-group row">
-            <label for="username" class="col-md-2 text-white">Username:</label>
+            <label for="username" class="col-md-2 col-form-label">Username:</label>
 
             <div class="col-md-10">
                 <InputText id="username" class="form-control" @bind-Value="userModel.UserName"></InputText>
-                <div class="text-red-500">
+                <div class="validation-message">
                     <!-- Displays any error messages from the username form -->
                     <ValidationMessage For="@(() => userModel.UserName)" />
                 </div>
@@ -31,12 +31,12 @@
         </div>
 
         <div class="form-group row">
-            <label for="password" class="col-md-2 text-white">Password:</label>
+            <label for="password" class="col-md-2 col-form-label">Password:</label>
 
             <div class="col-md-10">
                 <InputText type="password" id="password" class="form-control" @bind-Value="userModel.Password">
                 </InputText>
-                <div class="text-red-500">
+                <div class="validation-message">
                     <!-- Displays any error messages from the password form -->
                     <ValidationMessage For="@(() => userModel.Password)" />
                 </div>
@@ -44,12 +44,12 @@
         </div>
 
         <div class="form-group row">
-            <label for="confirm-password" class="col-md-2 text-white">Confirm password:</label>
+            <label for="confirm-password" class="col-md-2 col-form-label">Confirm password:</label>
 
             <div class="col-md-10">
                 <InputText type="password" id="confirm-password" class="form-control"
                     @bind-Value="userModel.ConfirmPassword"></InputText>
-                <div class="text-red-500">
+                <div class="validation-message">
                     <!-- Displays any error messages from the confirmPassword form -->
                     <ValidationMessage For="@(() => userModel.ConfirmPassword)" />
                 </div>
@@ -59,7 +59,7 @@
         <div class="row">
             <div class="col-md-12">
                 <!-- Triggers OnValidSubmit() if the form requirements are met -->
-                <button type="submit" class="w-full mt-4 bg-green-700 text-white">
+                <button type="submit" class="btn btn-success">
                     Register account
                 </button>
             </div>
diff --git a/src/LinuxLudo.Web/Pages/Register.razor.css b/src/LinuxLudo.Web/Pages/Register.razor.css
new file mode 100644
index 0000000..f04aab4
--- /dev/null
+++ b/src/LinuxLudo.Web/Pages/Register.razor.css
@@ -0,0 +1,42 @@
+.btn-success
+{
+    width: 100%;
+    margin-top: 10px;
+    background-color: #008000;
+    color: white;
+}
+
+.validation-message
+{
+    color: red
+}
+
+.login-container
+{
+    padding: 5px;
+    margin-left: 35%;
+    margin-right: 35%;
+    background-color: #343d52;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+.title-text
+{
+    margin-top: 5%;
+    margin-left: 35%;
+    margin-right: 35%;
+    background-color: #a52a2a;
+    color: white;
+    margin-top: 3%;
+    font-size: 34px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+.col-form-label
+{
+    color: white;
+} 
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Program.cs b/src/LinuxLudo.Web/Program.cs
index 1950231..c84d44a 100644
--- a/src/LinuxLudo.Web/Program.cs
+++ b/src/LinuxLudo.Web/Program.cs
@@ -4,7 +4,6 @@ using Microsoft.Extensions.DependencyInjection;
 using System;
 using System.Net.Http;
 using System.Threading.Tasks;
-using LinuxLudo.Web.Domain.Services;
 using LinuxLudo.Web.Hubs;
 using LinuxLudo.Web.Services;
 using LinuxLudo.Web.Domain.Services;
@@ -20,12 +19,11 @@ namespace LinuxLudo.Web
             var builder = WebAssemblyHostBuilder.CreateDefault(args);
             builder.RootComponents.Add<App>("#app");
 
-            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(Environment.GetEnvironmentVariable("API_URL") ?? builder.HostEnvironment.BaseAddress) });
+            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
             builder.Services.AddScoped<IAuthenticationService, AuthenticationService>();
             builder.Services.AddScoped<AuthenticationStateProvider, AuthStateProvider>();
             builder.Services.AddScoped<BrowserService>();
-            builder.Services.AddScoped<IGameService, GameService>();
-            builder.Services.AddScoped<IHubController, HubController>();
+            builder.Services.AddScoped<HubController>();
             builder.Services.AddBlazoredLocalStorage();
             builder.Services.AddAuthorizationCore();
 
diff --git a/src/LinuxLudo.Web/Services/AuthenticationService.cs b/src/LinuxLudo.Web/Services/AuthenticationService.cs
index c297d66..4c42369 100644
--- a/src/LinuxLudo.Web/Services/AuthenticationService.cs
+++ b/src/LinuxLudo.Web/Services/AuthenticationService.cs
@@ -1,4 +1,3 @@
-using System;
 using System.Net.Http;
 using System.Net.Http.Headers;
 using System.Net.Http.Json;
@@ -16,7 +15,7 @@ namespace LinuxLudo.Web.Services
     // This class is responsible for actually logging in/out through the API
     public class AuthenticationService : IAuthenticationService
     {
-        private readonly string API_URL;
+        private const string API_URL = "https://localhost:5001/api/Auth";
         private readonly HttpClient _client;
         private readonly AuthenticationStateProvider _authStateProvider;
         private readonly ILocalStorageService _localStorage;
@@ -26,7 +25,6 @@ namespace LinuxLudo.Web.Services
             _client = client;
             _authStateProvider = authStateProvider;
             _localStorage = localStorage;
-            API_URL = Environment.GetEnvironmentVariable("API_URL") ?? "https://localhost:5001";
         }
 
         public async Task<AuthenticatedUserModel> SignIn(AuthenticationUserModel user)
diff --git a/src/LinuxLudo.Web/Services/GameRenderer.cs b/src/LinuxLudo.Web/Services/GameRenderer.cs
index 349b9b4..04c3e3a 100644
--- a/src/LinuxLudo.Web/Services/GameRenderer.cs
+++ b/src/LinuxLudo.Web/Services/GameRenderer.cs
@@ -1,4 +1,5 @@
 using System;
+using System.Collections.Generic;
 using System.Linq;
 using System.Threading.Tasks;
 using Blazor.Extensions.Canvas.Canvas2D;
@@ -13,7 +14,7 @@ namespace LinuxLudo.Web.Services
     {
         private readonly ElementReference redToken, greenToken, blueToken, yellowToken;
         private Canvas2DContext context;
-        public int canvasWidth, canvasHeight;
+        private readonly int canvasWidth, canvasHeight;
         public string username;
         private const string canvasBgHex = "#9CA6D9";
         private const string overlayTextColor = "#FFFFFF";
diff --git a/src/LinuxLudo.Web/Services/GameService.cs b/src/LinuxLudo.Web/Services/GameService.cs
index 04c505e..e7dc7f9 100644
--- a/src/LinuxLudo.Web/Services/GameService.cs
+++ b/src/LinuxLudo.Web/Services/GameService.cs
@@ -1,32 +1,31 @@
 using System;
+using System.Collections.Generic;
 using System.Net.Http;
 using System.Net.Http.Json;
 using System.Text.Json;
 using System.Threading.Tasks;
 using LinuxLudo.Web.Domain.Models;
-using LinuxLudo.Web.Domain.Services;
 using LinuxLudo.Web.Game;
 
 namespace LinuxLudo.Web.Services
 {
-    public class GameService : IGameService
+    public class GameService
     {
-        private Guid _gameId;
-        private string _userName;
+        private readonly Guid _gameId;
+        private readonly string _userName;
         private readonly HttpClient _client;
-        private readonly string API_URL;
+        private const string API_URL = "https://localhost:5001/api";
 
-        public GameService()
+        public GameService(Guid gameId, string userName)
         {
-            API_URL = Environment.GetEnvironmentVariable("API_URL") ?? "https://localhost:5001";
-            _client = new HttpClient();
+            _gameId = gameId;
+            _userName = userName;
+            _client = new();
         }
 
-        public GameService NewGameService(Guid gameId, string userName)
+        public GameService()
         {
-            _gameId = gameId;
-            _userName = userName;
-            return this;
+            _client = new();
         }
 
         // Verifies if the specified user can play (the game is not full/player is not already in a game)
@@ -71,5 +70,19 @@ namespace LinuxLudo.Web.Services
             var response = JsonSerializer.Deserialize<GameStatus>(authContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
             return await Task.FromResult(response);
         }
+
+        public async Task<List<AvailableGame>> FetchAllGames()
+        {
+            var fetchResult = await _client.GetAsync(API_URL + "/Games");
+            if (!fetchResult.IsSuccessStatusCode)
+            {
+                Console.WriteLine("Fetching games failed!");
+                return null;
+            }
+
+            var resultContent = await fetchResult.Content.ReadAsStringAsync();
+            var response = JsonSerializer.Deserialize<GamesResponseModel>(resultContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
+            return response.Data;
+        }
     }
 }
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/Shared/NavMenu.razor b/src/LinuxLudo.Web/Shared/NavMenu.razor
index 6b65550..190f3bb 100644
--- a/src/LinuxLudo.Web/Shared/NavMenu.razor
+++ b/src/LinuxLudo.Web/Shared/NavMenu.razor
@@ -1,12 +1,17 @@
-ï»¿@inject IAuthenticationService _authService
-@inject Blazored.LocalStorage.ILocalStorageService _localStorage;
+ï»¿@using LinuxLudo.Web.Domain.Services
+@using Microsoft.AspNetCore.Components.Authorization
+@inject IAuthenticationService _authService
 
 <div class="bg-purple-300 flex justify-center items-center">
     <span class="font-bold text-white text-2xl">LinuxLudo</span> <img class="relative ml-4 float-left w-10 h-10"
         src="Images/logo.png" />
-    <!-- Displayed only when logged IN -->
-    <h1 class="navbar-name-text">Playing as&nbsp;<b>@username</b> @(isGuest ? "(Guest)" : "")
-    </h1>
+    <AuthorizeView>
+        <!-- Displayed only when logged IN -->
+        <Authorized>
+            <h1 class="navbar-name-text">Playing as&nbsp;<b>@userName</b>
+            </h1>
+        </Authorized>
+    </AuthorizeView>
 </div>
 
 <div class="text-white bg-blue-300 md:flex items-center md:justify-center text-center">
@@ -53,11 +58,9 @@
 {
     private bool menuVisible;
     private void ToggleMenu() => menuVisible = !menuVisible;
-
     [CascadingParameter]
     public Task<AuthenticationState> AuthState { get; set; }
-    private string username = "Guest";
-    private bool isGuest = true;
+    private string userName;
 
     // When the page has fully loaded
     protected override async Task OnInitializedAsync()
@@ -67,17 +70,7 @@
         // If the user is succesfully authenticated
         if (authState.User.Identity.IsAuthenticated)
         {
-            username = authState.User.Identity.Name;
-            isGuest = false;
-        }
-        else
-        {
-            string guestUsername = await _localStorage.GetItemAsStringAsync("GUEST_USERNAME");
-            if (guestUsername != null)
-            {
-                username = guestUsername;
-                isGuest = true;
-            }
+            userName = authState.User.Identity.Name;
         }
     }
 }
\ No newline at end of file
diff --git a/src/LinuxLudo.Web/_Imports.razor b/src/LinuxLudo.Web/_Imports.razor
index e43e30d..9910988 100644
--- a/src/LinuxLudo.Web/_Imports.razor
+++ b/src/LinuxLudo.Web/_Imports.razor
@@ -7,19 +7,13 @@
 @using Microsoft.AspNetCore.Components.Web
 @using Microsoft.AspNetCore.Components.Web.Virtualization
 @using Microsoft.AspNetCore.Components.WebAssembly.Http
-@using Microsoft.AspNetCore.SignalR.Client
-@using MessagePack
 @using Microsoft.JSInterop
-@using LinuxLudo.Core.Models
 @using LinuxLudo.Web
 @using LinuxLudo.Web.Shared
 @using LinuxLudo.Web.Authentication
 @using LinuxLudo.Web.Domain
-@using LinuxLudo.Web.Domain.Models
-@using LinuxLudo.Web.Hubs
 @using LinuxLudo.Web.Game
 @using LinuxLudo.Web.Services
-@using LinuxLudo.Web.Domain.Services
 @using LinuxLudo.Core
 @using Blazor.Extensions
 @using Blazor.Extensions.Canvas.Canvas2D
diff --git a/src/LinuxLudo.Web/nginx.conf b/src/LinuxLudo.Web/nginx.conf
deleted file mode 100644
index afa559a..0000000
--- a/src/LinuxLudo.Web/nginx.conf
+++ /dev/null
@@ -1,15 +0,0 @@
-events { }
-   http {
-      include mime.types;
-      types {
-         application/wasm wasm;
-       }
-     server {
-        listen 80;
-        index index.html;
-        location / {
-           root /var/www/web;
-           try_files $uri $uri/ /index.html =404;
-        }
-     }
-}
diff --git a/src/LinuxLudo.Web/wwwroot/css/app.css b/src/LinuxLudo.Web/wwwroot/css/app.css
index f6056e9..b8e3862 100644
--- a/src/LinuxLudo.Web/wwwroot/css/app.css
+++ b/src/LinuxLudo.Web/wwwroot/css/app.css
@@ -24,7 +24,7 @@ Use a more readable tab size (opinionated).
 html {
   -moz-tab-size: 4;
   -o-tab-size: 4;
-  tab-size: 4;
+     tab-size: 4;
 }
 
 /**
@@ -93,7 +93,7 @@ Add the correct text decoration in Chrome, Edge, and Safari.
 
 abbr[title] {
   -webkit-text-decoration: underline dotted;
-  text-decoration: underline dotted;
+          text-decoration: underline dotted;
 }
 
 /**
@@ -621,8 +621,8 @@ video {
 
 .appearance-none {
   -webkit-appearance: none;
-  -moz-appearance: none;
-  appearance: none;
+     -moz-appearance: none;
+          appearance: none;
 }
 
 .bg-local {
@@ -766,12 +766,12 @@ video {
 
 .decoration-slice {
   -webkit-box-decoration-break: slice;
-  box-decoration-break: slice;
+          box-decoration-break: slice;
 }
 
 .decoration-clone {
   -webkit-box-decoration-break: clone;
-  box-decoration-break: clone;
+          box-decoration-break: clone;
 }
 
 .box-border {
@@ -1019,12 +1019,12 @@ video {
 
 .object-cover {
   -o-object-fit: cover;
-  object-fit: cover;
+     object-fit: cover;
 }
 
 .object-bottom {
   -o-object-position: bottom;
-  object-position: bottom;
+     object-position: bottom;
 }
 
 .opacity-90 {
@@ -1047,7 +1047,7 @@ video {
 
 .overscroll-contain {
   -ms-scroll-chaining: none;
-  overscroll-behavior: contain;
+      overscroll-behavior: contain;
 }
 
 .p-3 {
@@ -1360,9 +1360,9 @@ video {
 
 .select-none {
   -webkit-user-select: none;
-  -moz-user-select: none;
-  -ms-user-select: none;
-  user-select: none;
+     -moz-user-select: none;
+      -ms-user-select: none;
+          user-select: none;
 }
 
 .align-middle {
@@ -1423,7 +1423,7 @@ video {
 
 .gap-x-2 {
   -moz-column-gap: 0.5rem;
-  column-gap: 0.5rem;
+       column-gap: 0.5rem;
 }
 
 .gap-y-3 {
@@ -1618,13 +1618,13 @@ video {
   0%, 100% {
     transform: translateY(-25%);
     -webkit-animation-timing-function: cubic-bezier(0.8,0,1,1);
-    animation-timing-function: cubic-bezier(0.8,0,1,1);
+            animation-timing-function: cubic-bezier(0.8,0,1,1);
   }
 
   50% {
     transform: none;
     -webkit-animation-timing-function: cubic-bezier(0,0,0.2,1);
-    animation-timing-function: cubic-bezier(0,0,0.2,1);
+            animation-timing-function: cubic-bezier(0,0,0.2,1);
   }
 }
 
@@ -1632,24 +1632,24 @@ video {
   0%, 100% {
     transform: translateY(-25%);
     -webkit-animation-timing-function: cubic-bezier(0.8,0,1,1);
-    animation-timing-function: cubic-bezier(0.8,0,1,1);
+            animation-timing-function: cubic-bezier(0.8,0,1,1);
   }
 
   50% {
     transform: none;
     -webkit-animation-timing-function: cubic-bezier(0,0,0.2,1);
-    animation-timing-function: cubic-bezier(0,0,0.2,1);
+            animation-timing-function: cubic-bezier(0,0,0.2,1);
   }
 }
 
 .animate-none {
   -webkit-animation: none;
-  animation: none;
+          animation: none;
 }
 
 .animate-spin {
   -webkit-animation: spin 1s linear infinite;
-  animation: spin 1s linear infinite;
+          animation: spin 1s linear infinite;
 }
 
 .mix-blend-multiply {
@@ -1732,12 +1732,12 @@ video {
   --tw-backdrop-saturate: var(--tw-empty,/*!*/ /*!*/);
   --tw-backdrop-sepia: var(--tw-empty,/*!*/ /*!*/);
   -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
-  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
+          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
 }
 
 .backdrop-filter-none {
   -webkit-backdrop-filter: none;
-  backdrop-filter: none;
+          backdrop-filter: none;
 }
 
 .backdrop-blur-lg {
@@ -1824,7 +1824,7 @@ video {
     text-align: center;
   }
 
-  .sm\:tabular-nums {
+   .sm\:tabular-nums {
     --tw-ordinal: var(--tw-empty,/*!*/ /*!*/);
     --tw-slashed-zero: var(--tw-empty,/*!*/ /*!*/);
     --tw-numeric-figure: var(--tw-empty,/*!*/ /*!*/);
