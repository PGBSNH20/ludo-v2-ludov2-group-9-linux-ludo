@page "/Game/{Id:int}"
@inject NavigationManager NavManager; // Used to navigate in the webbrowser to different urls
@inject BrowserService browserService;

<h1 class="title-text"><b>Game @Id</b></h1>

<AuthorizeView>
    <div class="game-canvas">
        <img @ref="redToken" hidden id="redToken" src="Images/redtoken.png" />
        <img @ref="greenToken" hidden id="greenToken" src="Images/greentoken.png" />
        <img @ref="blueToken" hidden id="blueToken" src="Images/bluetoken.png" />
        <img @ref="yellowToken" hidden id="yellowToken" src="Images/yellowtoken.png" />
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvas"></BECanvas>
    </div>

    <div class="player-controls @canvasHtmlString">
        <button class="roll-button" @onclick=RollDice>Roll dice</button>
        <button class="bring-token-button">Bring out token</button>
    </div>

    <div class="token-selection">
        <h1 class="select-token-text"><b>Select your token</b>
            <div class="radio">
                <input @onchange="@(() => UpdateTokenSelection('A'))" label="A" type="radio" id="token-a" name="token"
                    value="token-a" checked>
                <input @onchange="@(() => UpdateTokenSelection('B'))" label="B" type="radio" id="token-b" name="token"
                    value="token-b" checked>
                <input @onchange="@(() => UpdateTokenSelection('C'))" label="C" type="radio" id="token-c" name="token"
                    value="token-c" checked>
                <input @onchange="@(() => UpdateTokenSelection('D'))" label="D" type="radio" id="token-d" name="token"
                    value="token-d" checked>
            </div>
        </h1>
    </div>
</AuthorizeView>

@code
{
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }
    private string userName;

    // Canvas
    protected BECanvasComponent _canvas;
    private Canvas2DContext _context;
    private GameService _gameService;
    private GameStatus _gameStatus;
    private GameRenderer _gameRenderer;
    private GameBoard _board;
    private ElementReference redToken, greenToken, blueToken, yellowToken;
    private int _canvasWidth, _canvasHeight;
    private const int _minWidthResize = 1600;
    private const int _minHeightResize = 720;
    private const string backgroundHex = "#3D4849";
    private string canvasHtmlString => isPlayerTurn ? "" : "hidden";

    // Game
    private string currentStatus = "Waiting for players...";
    private char selectedToken = 'A';

    // This is true if it's the client-side player's turn
    private bool isPlayerTurn = true; // TODO SET ISPLAYERTURN FALSE -- ONLY FOR TESTING

    // When the page has fully loaded
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        // If the user is logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;

            var windowDim = await browserService.GetDimensions();
            _canvasWidth = windowDim.Width >= _minWidthResize && windowDim.Height >= _minHeightResize ? (int)(windowDim.Width *
            0.3) : (int)(windowDim.Width * 0.9);
            _canvasHeight = (int)(_canvasWidth * 1.15);

            // Initialize a new GameService to communicate with API
            _gameService = new GameService(@Id, userName);
            _gameRenderer = new GameRenderer(_canvasWidth, redToken, greenToken, blueToken, yellowToken);
            _board = new GameBoard();
        }
        else
        {
            NavManager.NavigateTo("/Login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Creates a canvas
        _context = await _canvas.CreateCanvas2DAsync();

        if (firstRender)
        {
            // Draws a basic canvas background color
            await _context.SetFillStyleAsync(backgroundHex);
            await _context.FillRectAsync(0, 0, _canvasWidth, _canvasHeight);

            // Fetches the current gamestatus BEFORE rendering anything
            _gameStatus = await _gameService.GetGameStatus();
        }

        _gameRenderer.RenderGame(_context, _board, _gameStatus, currentStatus);
    }

    protected async void RollDice()
    {
        if (isPlayerTurn)
        {
            // TODO IMPLEMENT WEBSOCKETS FOR ROLLING -- THIS IS ONLY FOR TESTING PURPOSES!!!!!!!!
            //await _gameService.RollDice();

            foreach (Player player in _gameStatus.Players)
            {
                for (int i = 0; i < player.Tokens.Count; i++)
                {
                    {
                        Random rand = new Random();
                        int roll = rand.Next(0, 7);

                        if (player.Tokens[i].TilePos + roll < _board.Tiles.Count)
                        {
                            player.Tokens[i].TilePos += roll;
                        }
                        else
                        {
                            player.Tokens[i].TilePos = ((player.Tokens[i].TilePos + roll) - _board.Tiles.Count);
                        }


                        _gameStatus.Players.ForEach(p => p.Tokens.Where(t => t.TilePos == player.Tokens[i].TilePos && p.Color !=
                        player.Color).ToList().ForEach(removeToken =>
                        {
                            p.Tokens.Remove(removeToken);
                            Console.WriteLine("Token knocked out!");
                        }));
                    }
                }
            }
            await OnAfterRenderAsync(false);
        }
    }

    private void UpdateTokenSelection(char token)
    {
        selectedToken = token;
        Console.WriteLine("Selected token: " + selectedToken);
    }
}
