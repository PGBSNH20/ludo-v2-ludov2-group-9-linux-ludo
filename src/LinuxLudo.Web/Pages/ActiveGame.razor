@page "/Game/{Id:guid}"
@using LinuxLudo.Web.Domain.Models
@using MessagePack
@using Microsoft.AspNetCore.SignalR.Client
@using LinuxLudo.Core.Models
@using LinuxLudo.Web.Hubs
@using LinuxLudo.Web.Services
@inject NavigationManager _navManager; // Used to navigate in the webbrowser to different urls
@inject BrowserService _browserService;
@inject IJSRuntime _jsRuntime;
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;
@inject HubController _hubController

<LayoutView>
    <img @ref="_redToken" class="hidden" id="redToken" src="Images/redtoken.png" />
    <img @ref="_greenToken" class="hidden" id="greenToken" src="Images/greentoken.png" />
    <img @ref="_blueToken" class="hidden" id="blueToken" src="Images/bluetoken.png" />
    <img @ref="_yellowToken" class="hidden" id="yellowToken" src="Images/yellowtoken.png" />

    <div hidden=@(!_hasJoinedGame)>
        <h1 class="text-lg text-center">
            <b>@_game.Name</b>
        </h1>
        <div class="mt-4 flex justify-center items-center">
            <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvas"></BECanvas>
        </div>

        <div class="flex items-center justify-center">
            <button
                class="w-40 h-20 bg-green-500 text-white float-left transition-all ease-in-out transform hover:scale-125 my-2 mr-6 @(CanPlayerRoll() ? "" : "hidden")"
                @onclick=RollDiceClick>Roll dice</button>
            <button
                class="w-40 h-20 bg-yellow-700 text-white float-left transition-all ease-in-out transform hover:scale-125 my-2 ml-6"
                @onclick=BringOutTokenClick>Bring out token</button>

            @functions {
                async Task RollDiceClick() => await RollDice();
                async Task BringOutTokenClick() => await BringOutToken();
            }
        </div>

        <div class="flex flex-row justify-center @(CanPlayerRoll() ? "" : "hidden")">
            <h1 class="mr-8">
                <b>Select your token</b>
                <div class="bg-gray-700 p-3 relative rounded"
                    style="content: attr(label); display: inline-block; text-align: center; width: 100%;">
                    @foreach (char tokenSelection in tokenSelections)
                    {
                        <input class="w-auto h-full outline-none cursor-pointer @(IsTokenDead(tokenSelection) ? "hidden" : "")"
                        @onchange="@(() => UpdateTokenSelection(tokenSelection))"
                        checked="@(_selectedToken.Equals(tokenSelection))" label=@tokenSelection type="radio"
                        id=@($"token-{tokenSelection}") name="token" value=@($"token-{tokenSelection}")>
                    }
                </div>
            </h1>
        </div>
    </div>

    @if (!_hasJoinedGame)
    {
        @functions {
        bool GameIsFull => _game.AmountPlaying >= _game.MaxPlayers && _game.MaxPlayers != 0;
    }
        if (_game.MaxPlayers > 0)
        {
            <div class="flex flex-col items-center text-center">
                <h1 class="text-black w-1/4 text-center text-lg font-bold mb-6">@_game.Name</h1>
                <h2 class="text-base" style=@(GameIsFull ? "color: red;" : "")>
                    Slots taken:
                    <b>@_game.AmountPlaying</b>/<b>@_game.MaxPlayers</b>
                </h2>
            </div>
            <div class="flex items-center flex-col pt-12" hidden=@(!_hasJoinedGame)>
                <button class="text-white text-center min-w-96 min-h-64 px-4 w-10 h-20 bg-yellow-700" disabled=@(GameIsFull)
            id="play-btn" @onclick=JoinGame>
                    @(GameIsFull ? "Game is full" : "Join game")
                </button>
                <button
            class="text-white text-center min-w-96 min-h-64 px-4 w-auto bg-blue-400 transition transform hover:scale-125"
            id="browse-btn" @onclick=@(() => _navManager.NavigateTo("/Play"))>
                    Browse
                    available games
                </button>
            </div>

            <input @bind="_username" class="flex items-center text-center" style="background-color: #000000; color: #FFFFFF;"
        placeholder="Enter your username">
        }
        else
        {
            <div class="relative flex items-center justify-center">
                <h1 class="absolute text-2xl mt-24 transition-all ease-in-out">Loading... please wait</h1>
            </div>
        }
    }
</LayoutView>

@code
{
    // Misc
    [Parameter]
    public Guid Id { get; set; }

    private string _username;
    private AvailableGame _game;
    private const string Hub = "gamehub";

    // SignalR
    private HubConnection _hub;

    // Canvas
    private BECanvasComponent _canvas;
    private Canvas2DContext _context;
    private GameRenderer _gameRenderer;
    private GameBoard _board;
    private ElementReference _redToken, _greenToken, _blueToken, _yellowToken;
    private int _canvasWidth, _canvasHeight;
    private const int MinWidthResize = 1600;
    private const int MinHeightResize = 720;
    private const float HeightWidthMultiplierIsMobile = 1.2f;
    private const int statusMessageUpdateIntervalMs = 1000;

    // Game
    private GameService _gameService;
    private GameStatus _gameStatus;
    private bool _hasJoinedGame = false;
    private string _statusMessage = "Waiting for players...";
    private char _selectedToken;
    private List<char> tokenSelections => new() { 'A', 'B', 'C', 'D' };

    // This is true if it's the client-side player's turn
    private bool isPlayerTurn;

    // When the page has fully loaded
    protected override async Task OnInitializedAsync()
    {
        _game = new();

        await FitCanvas();
        _board = new GameBoard();

        _gameService = new GameService(@Id, _username);

        var allGames = await _gameService.FetchAllGames();
        if (allGames.All(game => game.Id != Id.ToString()))
        {
            Console.WriteLine($"No such game with id: {Id}");
            _navManager.NavigateTo("/Play");
        }
        else
        {
            _game = allGames.First(game => game.Id == Id.ToString());
        }

        await SetupSignalR();
    }

    protected async Task FitCanvas()
    {
        var windowDim = await _browserService.GetDimensions();

        // If the screen is more or less mobile resolution
        if (windowDim.Height >= (windowDim.Width * HeightWidthMultiplierIsMobile))
        {
            _canvasWidth = (windowDim.Width);
        }
        else if (windowDim.Width >= MinWidthResize && windowDim.Height >= MinHeightResize)
        {
            _canvasWidth = (int)(windowDim.Width * 0.35);
        }
        else
        {
            _canvasWidth = (int)(windowDim.Width * 0.7);
        }

        _canvasHeight = (int)(_canvasWidth * 1.15);
    }

    private bool CanPlayerRoll()
    {
        return _username != null && _gameStatus != null 
        && _gameStatus.Players.Any(player => player.Name == _username && player.Tokens.Any(token => !token.InBase));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _gameStatus = new();
            _context = await _canvas.CreateCanvas2DAsync();

            StateHasChanged();
            _gameRenderer = new GameRenderer(_username, _canvasWidth, _canvasHeight, _redToken, _greenToken, _blueToken,
            _yellowToken);
        }

        if (_hasJoinedGame)
        {
            await RenderGame();
        }
    }

    protected async Task RenderGame()
    {
        _context = await _canvas.CreateCanvas2DAsync();
        await _gameRenderer.RenderGame(_context, _board, _gameStatus, _statusMessage, _selectedToken);
    }

    protected async Task SetupSignalR()
    {
        _hub = _hubController.Connect(Hub).Hub();

        // Called whenever a user joins/leaves
        _hub.On<byte[]>("ReceiveConnectionChanged", (message) => ReceiveConnectionChanged(message));

        // Called whenever a user rolls the dice (NOT WHEN TOKEN MOVES)
        _hub.On<byte[]>("ReceiveRollDice", (message) => ReceiveRollDice(message));

        // Called whenever the current player turn is updated
        _hub.On<byte[]>("ReceiveMoveToken", (message) => ReceiveMoveToken(message));

        // Called whenever the current player turn is updated
        _hub.On<byte[]>("ReceiveBringOutToken", (message) => ReceiveBringOutToken(message));

        // Called whenever the current player turn is updated
        _hub.On<byte[]>("ReceivePlayerTurn", (turnColor) => ReceivePlayerTurn(turnColor));

        // Called whenever the current player turn is updated
        _hub.On<byte[]>("ReceiveTokenKnockout", (message) => ReceiveTokenKnockout(message));

        await _hub.StartAsync();
    }

    protected async Task RollDice()
    {
        if (isPlayerTurn)
        {
            // Send a roll request to the server
            await _hub.InvokeAsync("MoveToken", MessagePackSerializer.Serialize(new TokenActionMessage(_username, _selectedToken)));
        }
    }

    protected async Task BringOutToken()
    {
        if (isPlayerTurn)
        {
            // Send a bring out token request to th server
            await _hub.InvokeAsync("BringOutToken", MessagePackSerializer.Serialize(_username));
        }
    }

    private void UpdateTokenSelection(char token)
    {
        Player player = GetPlayer();
        if (!IsTokenDead(token))
        {
            _selectedToken = token;
        }
        else if (player.Tokens.Count > 0)
        {
            if (player.Tokens.Any(t => !t.InBase))
            {
                _selectedToken = player.Tokens.FirstOrDefault(token => !token.InBase).IdentifierChar;
            }
            else
            {
                _selectedToken = player.Tokens.First().IdentifierChar;
            }
        }
    }

    private bool IsTokenDead(char tokenIdentifier)
    {
        if (_gameStatus != null)
        {
            Player player = GetPlayer();

            // Token is not dead if found in list
            if (player.Tokens.All(token => token.IdentifierChar != tokenIdentifier) || player.Tokens.Any(token =>
            token.IdentifierChar == tokenIdentifier &&
            token.InBase))
            {
                return true;
            }
        }

        // Token is alive/exists in list
        return false;
    }

    private Player GetPlayer()
    {
        if (_gameStatus != null && _gameStatus.Players.Any(p => p.Name == _username))
        {
            return _gameStatus.Players.First(p => p.Name == _username);
        }
        else
        {
            return new Player("dead", _username + " (SPECTATING)");
        }
    }

    private async Task JoinGame()
    {
        if (_game.AmountPlaying < _game.MaxPlayers)
        {
            await _hub.InvokeAsync("JoinGame", _username, Id);
            _hasJoinedGame = true;
            _gameRenderer.username = _username;
        }
    }

    private void ReceiveMoveToken(byte[] receivedMessage)
    {
        TokenMoveMessage message = MessagePackSerializer.Deserialize<TokenMoveMessage>(receivedMessage);

        _gameStatus.Players.First(player => player.Name == message.TokenDetails.Username).Tokens.First(t => t.IdentifierChar ==
        message.TokenDetails.TokenIdentifierChar).TilePos = message.TokenDetails.TilePos;
        _statusMessage = $"{(_username == message.TokenDetails.Username ? "You" : message.TokenDetails.Username)} walked {message.Roll} steps!";
    }

    private void ReceiveBringOutToken(byte[] receivedMessage)
    {
        TokenChangeMessage message = MessagePackSerializer.Deserialize<TokenChangeMessage>(receivedMessage); 
        GameToken playerToken = _gameStatus.Players.First(player => player.Name == message.Username).Tokens.First(t => t.IdentifierChar == message.TokenIdentifierChar);
        playerToken.InBase = false;
        playerToken.TilePos = message.TilePos;

        _statusMessage = $"{(_username == message.Username ? "You" : message.Username)} brought out token {message.TokenIdentifierChar.ToString().ToUpper()}!";
        StateHasChanged();
    }

    private void ReceiveConnectionChanged(byte[] receivedMessage)
    {
        ConnectionMessage message = MessagePackSerializer.Deserialize<ConnectionMessage>(receivedMessage);
        // Display the join/leave message in the canvas
        if (message.Players.Count > _gameStatus.Players.Count)
        {
            _statusMessage = _username == message.Username ? $"Welcome {_username}!" : $"{message.Username} has joined the game!";
        }
        else
        {
            _statusMessage= $"{message.Username} has left the game :(";
        }

        // Update the players
        _gameStatus.Players = message.Players;
        StateHasChanged();
    }

    private void ReceivePlayerTurn(byte[] receivedMessage)
    {
        string message = MessagePackSerializer.Deserialize<string>(receivedMessage);
        isPlayerTurn = GetPlayer().Color == message;

        string newTurnName = _gameStatus.Players.First(player => player.Color == message).Name;
        _statusMessage = $@"It's {(isPlayerTurn ? "your" : (newTurnName + $"{'\''}s"))} turn!";
        StateHasChanged();
    }

    private void ReceiveRollDice(byte[] receivedMessage)
    {
        PlayerRollMessage message = MessagePackSerializer.Deserialize<PlayerRollMessage>(receivedMessage);
        _statusMessage = $"{(message.Username == _username ? "You" : message.Username)} rolled a {message.Roll}!";
        StateHasChanged();
    }

    private void ReceiveTokenKnockout(byte[] receivedMessage)
    {
        TokenActionMessage message = MessagePackSerializer.Deserialize<TokenActionMessage>(receivedMessage);
        GameToken playerToken = _gameStatus.Players.First(player => player.Name == message.Username).Tokens.First(token => token.IdentifierChar == message.TokenIdentifierChar);
        playerToken.InBase = true;
        playerToken.TilePos = -1;
        playerToken.MovedFromSpawn = false;
        _statusMessage = $@"{(message.Username == _username ? "Your" : (message.Username + $"{'\''}s"))}" + $" token ({message.TokenIdentifierChar}) was knocked out!";
        StateHasChanged();
    }
}