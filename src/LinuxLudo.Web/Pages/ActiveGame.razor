@page "/Game/{Id:int}"
@inject NavigationManager NavManager; // Used to navigate in the webbrowser to different urls
@inject BrowserService browserService;

<AuthorizeView>
    <div class="game-screen" hidden=@(!hasJoinedGame)>
        <h1 class="title-text"><b>Game @Id</b></h1>
        <div class="game-canvas">
            <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvas"></BECanvas>
            <img @ref="redToken" hidden id="redToken" src="Images/redtoken.png" />
            <img @ref="greenToken" hidden id="greenToken" src="Images/greentoken.png" />
            <img @ref="blueToken" hidden id="blueToken" src="Images/bluetoken.png" />
            <img @ref="yellowToken" hidden id="yellowToken" src="Images/yellowtoken.png" />
        </div>

        <div class="player-controls @canvasHtmlString">
            <button class="roll-button" @onclick=RollDice>Roll dice</button>
            <button class="bring-token-button" @onclick=BringOutToken>Bring out token</button>
        </div>

        <div class="token-selection">
            <h1 class="select-token-text" hidden=@(IsTokenDead('A') && IsTokenDead('B') && IsTokenDead('C') &&
                IsTokenDead('D'))><b>Select your token</b>
                <div class="radio" hidden=@(IsTokenDead('A') && IsTokenDead('B') && IsTokenDead('C') &&
                    IsTokenDead('D'))>
                    <input @onchange="@(() => UpdateTokenSelection('A'))" hidden=@IsTokenDead('A')
                        checked="@(selectedToken.Equals('A'))" label="A" type="radio" id="token-a" name="token"
                        value="token-a">
                    <input @onchange="@(() => UpdateTokenSelection('B'))" hidden=@IsTokenDead('B')
                        checked="@(selectedToken.Equals('B'))" label="B" type="radio" id="token-b" name="token"
                        value="token-b">
                    <input @onchange="@(() => UpdateTokenSelection('C'))" hidden=@IsTokenDead('C')
                        checked="@(selectedToken.Equals('C'))" label="C" type="radio" id="token-c" name="token"
                        value="token-c">
                    <input @onchange="@(() => UpdateTokenSelection('D'))" hidden=@IsTokenDead('D')
                        checked="@(selectedToken.Equals('D'))" label="D" type="radio" id="token-d" name="token"
                        value="token-d">
                </div>
            </h1>
        </div>
    </div>

    @if (!hasJoinedGame)
    {
        <div class="join-screen" hidden=@(!hasJoinedGame)>
            <h1 class="join-text">Game @Id
            </h1>
        </div>

        <button class="join-button" @onclick=JoinGame>Join game</button>
        <button class="join-button" style="background-color: #6699CC;" @onclick=@(() =>
        NavManager.NavigateTo("/Play"))>Browse
            available games</button>
    }
</AuthorizeView>

@code
{
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }
    private string userName;

    // Canvas
    protected BECanvasComponent _canvas;
    private Canvas2DContext _context;
    private GameService _gameService;
    private GameStatus _gameStatus;
    private GameRenderer _gameRenderer;
    private GameBoard _board;
    private ElementReference redToken, greenToken, blueToken, yellowToken;
    private int _canvasWidth, _canvasHeight;
    private const int _minWidthResize = 1600;
    private const int _minHeightResize = 720;
    private string canvasHtmlString => isPlayerTurn ? "" : "hidden";

    // Game
    private bool hasJoinedGame = false;
    private string currentStatus = "Waiting for players...";
    private char selectedToken = 'A';

    // This is true if it's the client-side player's turn
    private bool isPlayerTurn = true; // TODO SET FROM API

    // When the page has fully loaded
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        // If the user is logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;

            var windowDim = await browserService.GetDimensions();
            _canvasWidth = windowDim.Width >= _minWidthResize && windowDim.Height >= _minHeightResize ? (int)(windowDim.Width *
            0.3) : (int)(windowDim.Width * 0.9);
            _canvasHeight = (int)(_canvasWidth * 1.15);

            // Initialize a new GameService to communicate with API
            _gameService = new GameService(@Id, userName);
            _board = new GameBoard();
        }
        else
        {
            NavManager.NavigateTo("/Login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Creates a canvas
        _context = await _canvas.CreateCanvas2DAsync();

        // Fetches the current gamestatus BEFORE rendering anything
        if (firstRender)
        {
            _gameStatus = new();
            _gameStatus.Players = new List<Player>()
{
// RED
new Player()
{
Name = "adam",
Color = "red",
Tokens = new List<GameToken>() {
new GameToken() {TilePos= 0, IdentifierChar = 'A', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'B', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 0, IdentifierChar = 'D' , InBase = true}}
},

// GREEN
new Player()
{
Name = "Jakob",
Color = "green",
Tokens = new List<GameToken>() {
new GameToken() {TilePos= 0, IdentifierChar = 'A', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'B', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 0, IdentifierChar = 'D', InBase = true }}
},

// BLUE
new Player()
{
Name = "Stephan",
Color = "blue",
Tokens = new List<GameToken>() {
new GameToken() {TilePos= 0, IdentifierChar = 'A', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'B', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 0 , IdentifierChar = 'D', InBase = true}}
},

// YELLOW
new Player()
{
Name = "Leo",
Color = "yellow",
Tokens = new List<GameToken>() {
new GameToken() {TilePos= 0, IdentifierChar = 'A', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'B', InBase = true},
new GameToken() {TilePos= 0, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 0 , IdentifierChar = 'D', InBase = true}}
}
};

            // Reload UI components on page load (to hide e.g radiobtns)
            StateHasChanged();
            _gameRenderer = new GameRenderer(userName, _canvasWidth, _canvasHeight, redToken, greenToken, blueToken, yellowToken);
        }

        // Fetch latest data from backend
        // _gameStatus = await _ gameService.GetGameStatus();

        await _gameRenderer.RenderGame(_context, _board, _gameStatus, currentStatus);
    }

    protected async void RollDice()
    {
        Player player = GetPlayer();
        if (isPlayerTurn && player.Tokens.Count(token => !token.InBase) > 0)
        {
            //await _gameService.RollDice();
            // TODO IMPLEMENT WEBSOCKETS FOR ROLLING -- THIS IS ONLY FOR TESTING PURPOSES!!!!!!!!

            Random rand = new Random();
            int roll = rand.Next(0, 7);
            currentStatus = $"{userName} rolled a {roll}!";

            UpdateTokenSelection(selectedToken);
            GameToken token = player.Tokens.Where(token => token.IdentifierChar ==
            selectedToken).FirstOrDefault();

            if (roll > 0)
            {
                token.TilePos += roll;
                if (token.TilePos >= _board.Tiles.Count - 2)
                {
                    player.Tokens.Remove(token);
                    token.TilePos = (token.TilePos - _board.Tiles.Count);
                    UpdateTokenSelection(selectedToken);
                }
            }

            await OnAfterRenderAsync(false);
        }
        else
        {
            currentStatus = "Bring out a token before rolling!";
        }
    }

    protected async void BringOutToken()
    {
        Player player = GetPlayer();
        if (isPlayerTurn && player.Tokens.Any(token => token.InBase))
        {
            int xPos = 0, yPos = 0;
            switch (player.Color)
            {
                case "red":
                    xPos = _board.redSpawnPosX;
                    yPos = _board.redSpawnPosY;
                    break;
            }

            char token = player.Tokens.First(token => token.InBase).IdentifierChar;

            // Move out a token to the spawn position
            int spawnIndex = _board.Tiles.FindIndex(tile => tile.XPos == xPos &&
            tile.YPos
            == yPos);

            player.Tokens.First(t => t.IdentifierChar == token).TilePos = spawnIndex;
            player.Tokens.First(t => t.IdentifierChar == token).InBase = false;

            if (!player.Tokens.Any(t => !t.InBase && t.IdentifierChar != player.Tokens.First(t => t.IdentifierChar ==
            token).IdentifierChar))
                UpdateTokenSelection(player.Tokens.First(t => t.IdentifierChar == token).IdentifierChar);


            // Render the changes
            await OnAfterRenderAsync(false);
        }
        else
        {
            currentStatus = "No tokens in base!";
        }

    }

    private void UpdateTokenSelection(char token)
    {
        Player player = GetPlayer();
        if (!IsTokenDead(token))
        {
            selectedToken = token;
        }
        else if (player.Tokens.Count > 0)
        {
            if (player.Tokens.Any(t => !t.InBase))
            {
                selectedToken = player.Tokens.FirstOrDefault(token => !token.InBase).IdentifierChar;
            }
            else
            {
                selectedToken = player.Tokens.First().IdentifierChar;
            }
        }
    }

    private bool IsTokenDead(char tokenIdentifier)
    {
        if (_gameStatus != null)
        {
            Player player = GetPlayer();

            // Token is not dead if found in list
            if (!player.Tokens.Any(token => token.IdentifierChar == tokenIdentifier)
            || player.Tokens.Any(token => token.IdentifierChar == tokenIdentifier &&
            token.InBase))
            {
                return true;
            }
        }

        // Token is alive/exists in list
        return false;
    }

    private Player GetPlayer()
    {
        if (_gameStatus != null && _gameStatus.Players.Any(p => p.Name == userName))
        {
            return _gameStatus.Players.First(p => p.Name == userName);
        }
        else
        {
            return new Player() { Name = userName + " (DEAD)" };
        }
    }

    private void JoinGame()
    {
        hasJoinedGame = true;
    }
}
