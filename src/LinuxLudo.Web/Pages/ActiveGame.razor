@page "/Game/{Id:int}"
@inject NavigationManager NavManager; // Used to navigate in the webbrowser to different urls
@inject BrowserService browserService;

<h1 class="title-text"><b>Game @Id</b></h1>

<AuthorizeView>
    <div class="game-canvas">
        <img @ref="redToken" hidden id="redToken" src="Images/redtoken.png" />
        <img @ref="greenToken" hidden id="greenToken" src="Images/greentoken.png" />
        <img @ref="blueToken" hidden id="blueToken" src="Images/bluetoken.png" />
        <img @ref="yellowToken" hidden id="yellowToken" src="Images/yellowtoken.png" />
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvas"></BECanvas>
    </div>

    <div class="player-controls @canvasHtmlString">
        <button class="roll-button" @onclick=RollDice>Roll dice</button>
        <button class="bring-token-button">Bring out token</button>
    </div>

    <div class="token-selection">
        <h1 class="select-token-text"><b>Select your token</b>
            <div class="radio">
                <input @onchange="@(() => UpdateTokenSelection('A'))" hidden=@IsTokenDead('A')
                    checked="@(selectedToken.Equals('A'))" label="A" type="radio" id="token-a" name="token"
                    value="token-a">
                <input @onchange="@(() => UpdateTokenSelection('B'))" hidden=@IsTokenDead('B')
                    checked="@(selectedToken.Equals('B'))" label="B" type="radio" id="token-b" name="token"
                    value="token-b">
                <input @onchange="@(() => UpdateTokenSelection('C'))" hidden=@IsTokenDead('C')
                    checked="@(selectedToken.Equals('C'))" label="C" type="radio" id="token-c" name="token"
                    value="token-c">
                <input @onchange="@(() => UpdateTokenSelection('D'))" hidden=@IsTokenDead('D')
                    checked="@(selectedToken.Equals('D'))" label="D" type="radio" id="token-d" name="token"
                    value="token-d">
            </div>
        </h1>
    </div>
</AuthorizeView>

@code
{
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }
    private string userName;

    // Canvas
    protected BECanvasComponent _canvas;
    private Canvas2DContext _context;
    private GameService _gameService;
    private GameStatus _gameStatus;
    private GameRenderer _gameRenderer;
    private GameBoard _board;
    private ElementReference redToken, greenToken, blueToken, yellowToken;
    private int _canvasWidth, _canvasHeight;
    private const int _minWidthResize = 1600;
    private const int _minHeightResize = 720;
    private string canvasHtmlString => isPlayerTurn ? "" : "hidden";

    // Game
    private string currentStatus = "Waiting for players...";
    private char selectedToken = 'A';

    // This is true if it's the client-side player's turn
    private bool isPlayerTurn = true; // TODO SET FROM API

    // When the page has fully loaded
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        // If the user is logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;

            var windowDim = await browserService.GetDimensions();
            _canvasWidth = windowDim.Width >= _minWidthResize && windowDim.Height >= _minHeightResize ? (int)(windowDim.Width *
            0.3) : (int)(windowDim.Width * 0.9);
            _canvasHeight = (int)(_canvasWidth * 1.15);

            // Initialize a new GameService to communicate with API
            _gameService = new GameService(@Id, userName);
            _gameRenderer = new GameRenderer(_canvasWidth, _canvasHeight, redToken, greenToken, blueToken, yellowToken);
            _board = new GameBoard();
        }
        else
        {
            NavManager.NavigateTo("/Login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Creates a canvas
        _context = await _canvas.CreateCanvas2DAsync();

        // Fetches the current gamestatus BEFORE rendering anything
        if (firstRender)
        {
            _gameStatus = new();
            _gameStatus.Players = new List<Player>()
{
// RED
new Player() {Color = "red", Tokens = new List<GameToken>() {
new GameToken() {TilePos= 63, IdentifierChar = 'A', InBase = true},
new GameToken() {TilePos= 62, IdentifierChar = 'B'},
new GameToken() {TilePos= 61, IdentifierChar = 'C'},
new GameToken() { TilePos = 60, IdentifierChar = 'D' }}},

// GREEN
new Player() {Color = "green", Tokens = new List<GameToken>() {
new GameToken() {TilePos= 44, IdentifierChar = 'A'},
new GameToken() {TilePos= 43, IdentifierChar = 'B', InBase = true},
new GameToken() {TilePos= 42, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 41, IdentifierChar = 'D', InBase = true }}},

// BLUE
new Player() {Color = "blue", Tokens = new List<GameToken>() {
new GameToken() {TilePos= 25, IdentifierChar = 'A'},
new GameToken() {TilePos= 24, IdentifierChar = 'B'},
new GameToken() {TilePos= 23, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 22 , IdentifierChar = 'D', InBase = true}}},

// YELLOW
new Player() {Name = "adam", Color = "yellow", Tokens = new List<GameToken>() {
new GameToken() {TilePos= 6, IdentifierChar = 'A', InBase = true},
new GameToken() {TilePos= 5, IdentifierChar = 'B', InBase = true},
new GameToken() {TilePos= 4, IdentifierChar = 'C', InBase = true},
new GameToken() { TilePos = 3 , IdentifierChar = 'D', InBase = true}}}
};
        }

        // Fetch latest data from backend
        // _gameStatus = await _ gameService.GetGameStatus();

        _gameRenderer.RenderGame(_context, _board, _gameStatus, currentStatus);
    }

    protected async void RollDice()
    {
        Player player = GetPlayer();
        if (isPlayerTurn && player.Tokens.Count > 0)
        {
            // TODO IMPLEMENT WEBSOCKETS FOR ROLLING -- THIS IS ONLY FOR TESTING PURPOSES!!!!!!!!
            //await _gameService.RollDice();

            Random rand = new Random();
            int roll = rand.Next(0, 7);
            currentStatus = $"{userName} rolled a {roll}!";

            UpdateTokenSelection(selectedToken);
            GameToken token = player.Tokens.Where(token => token.IdentifierChar ==
            selectedToken).FirstOrDefault();

            token.TilePos += roll;
            if (token.TilePos >= _board.Tiles.Count - 1)
            {
                player.Tokens.Remove(token);
            }

            await OnAfterRenderAsync(false);
        }
    }

    private void UpdateTokenSelection(char token)
    {
        Player player = GetPlayer();
        if (!IsTokenDead(token))
        {
            selectedToken = token;
        }
        else if (player.Tokens.Count > 0)
        {
            selectedToken = player.Tokens.FirstOrDefault().IdentifierChar;
        }

        Console.WriteLine("Selected token: " + selectedToken);
    }

    private bool IsTokenDead(char tokenIdentifier)
    {
        if (_gameStatus != null)
        {
            Player player = GetPlayer();

            // Token is not dead if found in list
            if (!player.Tokens.Any(token => token.IdentifierChar == tokenIdentifier))
                return true;
        }

        // Token is alive/exists in list
        return false;
    }

    private Player GetPlayer()
    {
        if (_gameStatus != null && _gameStatus.Players.Any(p => p.Name == userName))
        {
            return _gameStatus.Players.First(p => p.Name == userName);
        }
        else
        {
            return new Player() { Name = userName + " (DEAD)" };
        }
    }
}
