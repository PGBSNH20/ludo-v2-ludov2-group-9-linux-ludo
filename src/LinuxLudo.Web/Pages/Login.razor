@page "/Login"
@using LinuxLudo.Web.Domain.Services
@using LinuxLudo.Web.Domain.Models

@inject IAuthenticationService AuthService; // Used to talk to the API
@inject NavigationManager NavManager; // Used to navigate in the webbrowser to different urls

@if (showAuthError)
{
    <div class="alert alert-danger" role="alert">
        <h1 class="flex items-center justify-center" style="color: black;">@errorMsg</h1>
    </div>
}

<h1 class="mt-4 my-20 text-white text-lg flex items-center justify-center bg-green-800">Please login to continue</h1>
<div class="p-3 my-20 bg-gray-700 flex items-center justify-center">
    <EditForm Model="userModel" OnValidSubmit="LoginUser" class="card card-body bg-dark">
        <DataAnnotationsValidator />

        <!-- Creates two forms (username/password) and binds the data in them to the userModel variables -->
        <div class="p-3 m-3">
            <div class="p-3">
                <div class="mt-2">
                    <InputText id="username" class="form-control" @bind-Value="userModel.UserName"
                        placeholder="Enter your username" />
                    <div class="text-red-500">
                        <!-- Displays any error messages from the username form -->
                        <ValidationMessage For="@(() => userModel.UserName)" />
                    </div>
                </div>
                <div class="mt-2">
                    <InputText type="password" id="password" class="form-control" @bind-Value="userModel.Password"
                        placeholder="Enter your password" />
                    <div class="text-red-500">
                        <!-- Displays any error messages from the password form -->
                        <ValidationMessage For="@(() => userModel.Password)" />
                    </div>
                </div>
            </div>

            <div class="p-3">
                <div class="mt-2">
                    <!-- When the "submit" button type is clicked LoginUser is called (if valid form input) -->
                    <button type="submit" class="bg-green-700 text-white w-full">Login</button>
                </div>
                <div class="col-md-12">
                    <!-- Redirects to /Register -->
                    <button type="submit" class="bg-red-700 text-white w-full mt-2" @onclick=RedirectRegister>Register</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code
{
    private AuthenticationUserModel userModel = new(); // The variable to store the form data (user/pass)
    private bool showAuthError; // Whether or not to show errorMsg
    private string errorMsg = ""; // This message shows up if the user has e.g entered invalid credentials

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }
    private void RedirectRegister() => NavManager.NavigateTo("/Register");

    // When the page has fully loaded
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        // If the user already is logged in, redirect
        if (authState.User.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/Play");
        }
    }

    private async Task LoginUser()
    {
        showAuthError = false;
        var response = await AuthService.SignIn(userModel);

        // If the login was successful
        if (response is not null)
        {
            // Login was successful
            NavManager.NavigateTo("/Play", true);
        }

        errorMsg = "Invalid credentials, try again!";
        showAuthError = true;
    }
}