@page "/Register"
@using LinuxLudo.Web.Domain.Services
@using LinuxLudo.Web.Domain.Models
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager


@if (showAuthError)
{
    <div class="alert alert-danger" role="alert">
        <h1 style="color: red;">@errorMsg</h1>
    </div>
}

<h1 class="mt-4 my-20 text-white text-lg flex items-center justify-center bg-green-800">Register a new account</h1>

<div class="p-3 my-20 bg-gray-700 flex items-center justify-center">
    <EditForm Model="@userModel" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="username" class="col-md-2 text-white">Username:</label>

            <div class="col-md-10">
                <InputText id="username" class="form-control" @bind-Value="userModel.UserName"></InputText>
                <div class="text-red-500">
                    <!-- Displays any error messages from the username form -->
                    <ValidationMessage For="@(() => userModel.UserName)" />
                </div>
            </div>
        </div>

        <div class="form-group row">
            <label for="password" class="col-md-2 text-white">Password:</label>

            <div class="col-md-10">
                <InputText type="password" id="password" class="form-control" @bind-Value="userModel.Password">
                </InputText>
                <div class="text-red-500">
                    <!-- Displays any error messages from the password form -->
                    <ValidationMessage For="@(() => userModel.Password)" />
                </div>
            </div>
        </div>

        <div class="form-group row">
            <label for="confirm-password" class="col-md-2 text-white">Confirm password:</label>

            <div class="col-md-10">
                <InputText type="password" id="confirm-password" class="form-control"
                    @bind-Value="userModel.ConfirmPassword"></InputText>
                <div class="text-red-500">
                    <!-- Displays any error messages from the confirmPassword form -->
                    <ValidationMessage For="@(() => userModel.ConfirmPassword)" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <!-- Triggers OnValidSubmit() if the form requirements are met -->
                <button type="submit" class="w-full mt-4 bg-green-700 text-white">
                    Register account
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code
{
    CreateUserModel userModel = new();
    private string errorMsg = "";
    private bool showAuthError;

    // If the form data meets the requirements & register btn is clicked
    private async Task OnValidSubmit()
    {
        showAuthError = false;

        var response = await AuthService.SignUp(userModel);
        if (response.StatusCode != 201)
        {
            errorMsg = response.Message;
            showAuthError = true;
        }
        else
        {
            // Automatically login using the new user credentials
            var loginResponse = await AuthService.SignIn(new AuthenticationUserModel(userModel.UserName, userModel.Password));

            // If the login was successful
            if (response is not null)
            {
                // Automatically navigate to the "games" section
                NavManager.NavigateTo("/Play", true);
            }
            else
            {
                errorMsg = "An unknown issue occurred! Refresh the page and try again.";
                showAuthError = true;
            }
        }
    }
}