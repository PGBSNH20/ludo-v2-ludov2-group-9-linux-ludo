@page "/Register"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager


@if (showAuthError)
{
    <div class="alert alert-danger" role="alert">
        <h1 style="color: red;">@errorMsg</h1>
    </div>
}

<h1 class="title-text">Register a new account</h1>
<EditForm Model="@userModel" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group row">
        <label for="username" class="col-md-2 col-form-label">Username:</label>

        <div class="col-md-10">
            <InputText id="username" class="form-control" @bind-Value="userModel.UserName"></InputText>
            <ValidationMessage For="@(() => userModel.UserName)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>

        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="userModel.Password"></InputText>
            <ValidationMessage For="@(() => userModel.Password)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm-password" class="col-md-2 col-form-label">Confirm password:</label>

        <div class="col-md-10">
            <InputText type="password" id="confirm-password" class="form-control"
                @bind-Value="userModel.ConfirmPassword"></InputText>
            <ValidationMessage For="@(() => userModel.ConfirmPassword)" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <button type="submit" class="btn btn-success">
                Register
            </button>
        </div>
    </div>
</EditForm>

@code
{
    CreateUserModel userModel = new();
    private string errorMsg = "";
    private bool showAuthError;

    // If the form data meets the requirements & register btn is clicked
    private async Task OnValidSubmit()
    {
        showAuthError = false;

        var response = await AuthService.SignUp(userModel);
        if (response.StatusCode != 201)
        {
            errorMsg = response.Message;
            showAuthError = true;
        }
        else
        {
            // Automatically login using the new user credentials
            var loginResponse = await AuthService.SignIn(new AuthenticationUserModel(userModel.UserName, userModel.Password));

            // If the login was successful
            if (response is not null)
            {
                // Automatically navigate to the "games" section
                NavManager.NavigateTo("/Play");
            }
            else
            {
                errorMsg = "An unknown issue occurred! Refresh the page and try again.";
                showAuthError = true;
            }
        }
    }
}