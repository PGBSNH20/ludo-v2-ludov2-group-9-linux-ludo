@page "/Play"
@using LinuxLudo.Web.Domain.Services
@using LinuxLudo.Web.Services
@inject NavigationManager NavManager; // Used to navigate in the webbrowser to different urls
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<!-- This page displays the actual Ludo game and can only be accessed when logged in/authenticated -->

<AuthorizeView>
    <!-- Logged in/game view -->
    <Authorized>
        <div class="game-container">
            <div class="game-board">
                <h1 class="title-text">Available games</h1>
            </div>

            <div class="available-games">
                <div class="btn-group">
                    <ul>
                        @if (availableGames != null)
                {
                        foreach (AvailableGame game in availableGames)
                        {
                            <li><button class="game-btn" @onclick=@(() =>
                                NavManager.NavigateTo($"/Game/{game.Id}"))><b>@game.Name</b> - @game.MaxPlayers
                                    players</button></li>
                        }
                }
                    </ul>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private string userName;
    private GameService gameService;
    private List<AvailableGame> availableGames;

    // When the page is fully loaded/on startup
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        // If the user is logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
        }
        else
        {
            NavManager.NavigateTo("/Login");
        }


        availableGames = new List<AvailableGame>();
        gameService = new GameService();
        await FetchAvailableGames();
    }

    private async Task FetchAvailableGames()
    {
        var authToken = await localStorage.GetItemAsync<string>("authToken");
        availableGames = await gameService.FetchAllGames(authToken);
    }
}